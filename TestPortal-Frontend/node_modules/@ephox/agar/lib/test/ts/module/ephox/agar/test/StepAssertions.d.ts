import { Chain } from 'ephox/agar/api/Chain';
import { Step } from 'ephox/agar/api/Step';
declare const failed: <T>(label: string, expected: T, step: Step<T, T>) => Step<T, T>;
declare const passed: <T>(label: string, expected: string | T, step: Step<T, T>) => Step<T, T>;
declare const testStepsPass: <T>(expected: T, steps: Array<Step<any, any>>) => Step<any, any>;
declare const testStepsFail: <E>(expected: E, steps: Array<Step<any, any>>) => Step<any, any>;
declare const testStepFail: <T, E>(expected: E, step: Step<T, any>) => Step<T, T>;
declare const testStepFailPprintError: <E, T>(expectedExpectedValue: E, expectedActualValue: E, step: Step<T, T>) => Step<T, T>;
declare const testChain: <T>(expected: T, chain: Chain<T, T>) => Step<T, T>;
declare const testChainFail: <T, E>(expected: E, initial: T, chain: Chain<any, any>) => Step<T, any>;
declare const testChainsFail: <T, E>(expected: E, initial: T, chains: Array<Chain<any, any>>) => Step<T, any>;
declare const preserved: () => string;
export { failed, passed, preserved, testStepFail, testStepFailPprintError, testStepsFail, testStepsPass, testChain, testChainFail, testChainsFail };
//# sourceMappingURL=StepAssertions.d.ts.map