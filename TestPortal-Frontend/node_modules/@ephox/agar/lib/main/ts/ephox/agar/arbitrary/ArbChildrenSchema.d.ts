import * as fc from 'fast-check';
import * as WeightedChoice from './WeightedChoice';
type WeightedItem = WeightedChoice.WeightedItem;
interface ChanceItem {
    readonly chance: number;
}
interface Detail<T> {
    readonly components: Record<string, T>;
}
export interface CompositeDetail extends Detail<WeightedItem> {
    readonly recursionDepth?: number;
}
export interface StructureDetail extends Detail<ChanceItem> {
}
export type Construct<T> = (component: string, depth: number) => fc.Arbitrary<T>;
declare const none: fc.Arbitrary<any[]>;
declare const composite: <T>(rawDepth: number | undefined, detail: CompositeDetail, construct: Construct<T>) => fc.Arbitrary<T[]>;
declare const structure: <T>(rawDepth: number | undefined, detail: StructureDetail, construct: Construct<T>) => fc.Arbitrary<T[]>;
export { none, composite, structure };
//# sourceMappingURL=ArbChildrenSchema.d.ts.map