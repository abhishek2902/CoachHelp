import { Optional } from '@ephox/katamari';
import { SugarElement } from '@ephox/sugar';
type SizzleContext = Element | Document | DocumentFragment;
declare const descendant: <T extends Element>(sugarElement: SugarElement<SizzleContext>, selector: string) => Optional<SugarElement<T>>;
declare const descendants: <T extends Element>(sugarElement: SugarElement<SizzleContext>, selector: string) => SugarElement<T>[];
declare const matches: <T extends Element>(sugarElement: SugarElement<Node>, selector: string) => sugarElement is SugarElement<T>;
declare const child: <T extends Element>(sugarElement: SugarElement<Node>, selector: string) => Optional<SugarElement<T>>;
declare const children: <T extends Element>(sugarElement: SugarElement<Node>, selector: string) => SugarElement<T>[];
export { descendant, descendants, matches, child, children };
//# sourceMappingURL=SizzleFind.d.ts.map