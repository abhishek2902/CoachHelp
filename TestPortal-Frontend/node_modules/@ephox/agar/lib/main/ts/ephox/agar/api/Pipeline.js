import { Arr, Type } from '@ephox/katamari';
import { TestLogs } from './TestLogs';
const assertSteps = (steps) => {
    Arr.each(steps, (s, i) => {
        let msg;
        if (s === undefined) {
            msg = 'step ' + i + ' was undefined. All steps: ' + JSON.stringify(steps) + '\n';
        }
        else if (Type.isArray(s)) {
            msg = 'step ' + i + ' was an array';
        }
        if (msg !== undefined) {
            // eslint-disable-next-line no-console
            console.trace(msg, steps);
            throw new Error(msg);
        }
    });
};
/**
 * Execute a Step, supplying default logs.
 *
 * If you need to run a sequence of steps, compose them using the functions in StepSequence
 */
const runStep = (initial, step, onSuccess, onFailure, initLogs) => {
    step.runStep(initial, onSuccess, onFailure, TestLogs.getOrInit(initLogs));
};
const async = (initial, steps, onSuccess, onFailure, initLogs) => {
    assertSteps(steps);
    const chain = (lastLink, logs, index) => {
        if (index < steps.length) {
            const asyncOperation = steps[index];
            // FIX: Make this test elsewhere without creating a circular dependency on Chain
            if ('runChain' in asyncOperation) {
                return onFailure('You cannot create a pipeline out of chains. Use Chain.asStep to turns chains into steps', logs);
            }
            try {
                const nextStep = (result, newLogs) => {
                    chain(result, newLogs, index + 1);
                };
                asyncOperation.runStep(lastLink, (x, newLogs) => {
                    nextStep(x, newLogs);
                }, onFailure, logs);
            }
            catch (error) {
                onFailure(error, logs);
            }
        }
        else {
            const finalLogs = logs;
            onSuccess(lastLink, finalLogs);
        }
    };
    const startLogs = TestLogs.getOrInit(initLogs);
    chain(initial, startLogs, 0);
};
export const Pipeline = {
    async,
    runStep
};
//# sourceMappingURL=Pipeline.js.map