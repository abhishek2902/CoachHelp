import { Result } from '@ephox/katamari';
import { SugarElement } from '@ephox/sugar';
import { Chain } from './Chain';
import { Step } from './Step';
declare const getFocused: <T extends HTMLElement>(doc: SugarElement<Document | ShadowRoot>) => Result<SugarElement<T>, string>;
declare const getActiveValue: (element: SugarElement<Node>) => string | undefined;
declare const setFocus: <T extends HTMLElement>(container: SugarElement<Node>, selector: string) => SugarElement<T>;
declare const setActiveValue: (doc: SugarElement<Document | ShadowRoot>, newValue: string) => SugarElement<HTMLElement>;
declare const isOn: (label: string, element: SugarElement<Node>) => SugarElement<HTMLElement>;
declare const isOnSelector: (label: string, doc: SugarElement<Document | ShadowRoot>, selector: string) => SugarElement<HTMLElement>;
declare const cGetFocused: Chain<SugarElement<Document | ShadowRoot>, SugarElement<HTMLElement>>;
declare const sIsOn: <T>(label: string, element: SugarElement<Node>) => Step<T, T>;
declare const sIsOnSelector: <T>(label: string, doc: SugarElement<Document | ShadowRoot>, selector: string) => Step<T, T>;
declare const sTryOnSelector: <T>(label: string, doc: SugarElement<Document | ShadowRoot>, selector: string) => Step<T, T>;
declare const pTryOnSelector: (label: string, doc: SugarElement<Document | ShadowRoot>, selector: string) => Promise<SugarElement<HTMLElement>>;
declare const cSetFocus: <T extends Node, U extends HTMLElement>(label: string, selector: string) => Chain<SugarElement<T>, SugarElement<U>>;
declare const cSetActiveValue: (newValue: string) => Chain<SugarElement<Node>, SugarElement<HTMLElement>>;
declare const cGetActiveValue: Chain<SugarElement<Node>, string>;
declare const sSetFocus: <T>(label: string, container: SugarElement<Node>, selector: string) => Step<T, T>;
declare const sSetActiveValue: <T>(doc: SugarElement<Document | ShadowRoot>, newValue: string) => Step<T, T>;
export { getActiveValue, setActiveValue, setFocus, getFocused, isOn, isOnSelector, pTryOnSelector, sSetActiveValue, sSetFocus, sIsOn, sIsOnSelector, sTryOnSelector, cSetFocus, cSetActiveValue, cGetActiveValue, cGetFocused };
//# sourceMappingURL=FocusTools.d.ts.map