import { Optional } from '@ephox/katamari';
import { Chain } from './Chain';
import { Step } from './Step';
export interface TestStore<T = string> {
    add: (value: T) => void;
    adder: (value: T) => () => void;
    adderH: (value: T) => () => Optional<boolean>;
    clear: () => void;
    sClear: Step<any, any>;
    cClear: Chain<any, any>;
    sAssertEq: (label: string, expected: T[]) => Step<any, any>;
    cAssertEq: (label: string, expected: T[]) => Chain<any, any>;
    assertEq: (label: string, expected: T[]) => void;
    assertSortedEq: (label: string, expected: T[], cmp?: (a: T, b: T) => number) => void;
    sAssertSortedEq: (label: string, expected: T[], cmp?: (a: T, b: T) => number) => Step<any, any>;
}
export declare const TestStore: <T = string>() => TestStore<T>;
//# sourceMappingURL=TestStore.d.ts.map