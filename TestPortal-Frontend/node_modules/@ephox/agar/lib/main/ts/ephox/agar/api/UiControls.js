import { Type } from '@ephox/katamari';
import { Value } from '@ephox/sugar';
import { Chain } from './Chain';
import { Step } from './Step';
import * as UiFinder from './UiFinder';
const fireEvent = (elem, event) => {
    const evt = new Event(event, {
        bubbles: true,
        cancelable: true
    });
    elem.dom.dispatchEvent(evt);
};
const setValue = (element, newValue, eventName) => {
    Value.set(element, newValue);
    if (Type.isNonNullable(eventName)) {
        fireEvent(element, eventName);
    }
};
const setValueOn = (container, selector, newValue, eventName) => {
    const element = UiFinder.findIn(container, selector).getOrDie();
    setValue(element, newValue, eventName);
};
const getValue = (element) => Value.get(element);
const cSetValue = (newValue) => Chain.op((element) => {
    setValue(element, newValue);
});
const cGetValue = Chain.mapper(getValue);
const sSetValue = (element, newValue) => Step.sync(() => setValue(element, newValue));
const sSetValueOn = (container, selector, newValue) => Step.sync(() => setValueOn(container, selector, newValue));
export { setValue, setValueOn, getValue, sSetValueOn, sSetValue, cSetValue, cGetValue };
//# sourceMappingURL=UiControls.js.map