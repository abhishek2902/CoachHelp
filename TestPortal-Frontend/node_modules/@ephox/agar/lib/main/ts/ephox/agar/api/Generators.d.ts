import { SimRange, SugarElement } from '@ephox/sugar';
import * as fc from 'fast-check';
import * as GenSelection from '../arbitrary/GenSelection';
import * as TagDecorator from '../arbitrary/TagDecorator';
interface DescribedSimRange {
    readonly selection: {
        readonly startElement: string;
        readonly startElementFull: string;
        readonly startPath: number[];
        readonly startOffset: number;
        readonly finishElement: string;
        readonly finishElementFull: string;
        readonly finishPath: number[];
        readonly finishOffset: number;
    };
}
declare const selection: (container: SugarElement<Node>, exclusions: GenSelection.SelectionExclusions) => fc.Arbitrary<SimRange>;
declare const describeSelection: (root: SugarElement<Node>, generated: SimRange) => DescribedSimRange | SimRange;
declare const chooseOne: <T>(choices: TagDecorator.Decorator<T>[]) => fc.Arbitrary<Record<string, T>>;
declare const enforce: <T extends Record<string, string | number | boolean>>(attrs: T) => fc.Arbitrary<T>;
declare const hexColor: fc.Arbitrary<string>;
export { selection, describeSelection, chooseOne, enforce, hexColor };
//# sourceMappingURL=Generators.d.ts.map