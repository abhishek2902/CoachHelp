import { SugarElement } from '@ephox/sugar';
import * as Clicks from '../mouse/Clicks';
import { Chain } from './Chain';
import { Step } from './Step';
declare const click: (element: SugarElement<Node>, settings?: Clicks.Settings) => void;
declare const mouseOver: (element: SugarElement<Node>, settings?: Clicks.Settings) => void;
declare const mouseDown: (element: SugarElement<Node>, settings?: Clicks.Settings) => void;
declare const mouseUp: (element: SugarElement<Node>, settings?: Clicks.Settings) => void;
declare const mouseMove: (element: SugarElement<Node>, settings?: Clicks.Settings) => void;
declare const mouseOut: (element: SugarElement<Node>, settings?: Clicks.Settings) => void;
declare const mouseMoveTo: (element: SugarElement<Node>, dx: number, dy: number, settings?: Omit<Clicks.Settings, 'dx' | 'dy'>) => void;
declare const mouseUpTo: (element: SugarElement<Node>, dx: number, dy: number, settings?: Omit<Clicks.Settings, 'dx' | 'dy'>) => void;
declare const cClickWith: (settings: Clicks.Settings) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cContextMenuWith: (settings: Clicks.Settings) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cMouseOverWith: (x_0: Clicks.Settings) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cMouseDownWith: (x_0: Clicks.Settings) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cMouseUpWith: (x_0: Clicks.Settings) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cMouseMoveWith: (x_0: Clicks.Settings) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cMouseOutWith: (x_0: Clicks.Settings) => Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cMouseUpWith({ dx, dy }) instead */
declare const cMouseUpTo: (dx: number, dy: number) => Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cMouseMoveWith({ dx, dy }) instead */
declare const cMouseMoveTo: (dx: number, dy: number) => Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cClickWith({ }) instead*/
declare const cClick: Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cContextMenuWith({ }) instead */
declare const cContextMenu: Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cMouseOverWith({ }) instead */
declare const cMouseOver: Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cMouseDownWith({ }) instead */
declare const cMouseDown: Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cMouseUpWith({ }) instead */
declare const cMouseUp: Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cMouseMoveWith({ }) instead */
declare const cMouseMove: Chain<SugarElement<Node>, SugarElement<Node>>;
/**
 * @deprecated use cMouseOutWith({ }) instead */
declare const cMouseOut: Chain<SugarElement<Node>, SugarElement<Node>>;
declare const clickOn: <T extends HTMLElement>(container: SugarElement<Node>, selector: string) => SugarElement<T>;
declare const hoverOn: <T extends Element>(container: SugarElement<Node>, selector: string) => SugarElement<T>;
declare const contextMenuOn: <T extends Element>(container: SugarElement<Node>, selector: string) => SugarElement<T>;
declare const sClickOn: <T>(container: SugarElement<Node>, selector: string) => Step<T, T>;
declare const sHoverOn: <T>(container: SugarElement<Node>, selector: string) => Step<T, T>;
declare const sContextMenuOn: <T>(container: SugarElement<Node>, selector: string) => Step<T, T>;
declare const cClickOn: <T>(selector: string) => Chain<SugarElement<T>, SugarElement<T>>;
declare const trueClick: (elem: SugarElement<HTMLElement>) => void;
declare const trueClickOn: (container: SugarElement<Node>, selector: string) => void;
declare const cTrueClick: Chain<SugarElement<HTMLElement>, SugarElement<HTMLElement>>;
declare const sTrueClickOn: <T>(container: SugarElement<Node>, selector: string) => Step<T, T>;
declare const leftClickButton = 0;
declare const middleClickButton = 1;
declare const rightClickButton = 2;
declare const leftClickButtons = 1;
declare const rightClickButtons = 2;
declare const middleClickButtons = 4;
/**
 * @deprecated Use event instead */
declare const point: (type: string, button: number, element: SugarElement<Node>, x: number, y: number) => void;
declare const event: (type: Clicks.EventType, { dx, dy, ...settings }: Clicks.Settings) => (element: SugarElement<Node>) => void;
export { cClickWith, cContextMenuWith, cMouseOverWith, cMouseDownWith, cMouseUpWith, cMouseMoveWith, cMouseOutWith, cClick, cContextMenu, cMouseOver, cMouseDown, cMouseUp, cMouseMove, cMouseOut, cMouseUpTo, cMouseMoveTo, sClickOn, sHoverOn, sContextMenuOn, cClickOn, trueClick, trueClickOn, cTrueClick, sTrueClickOn, leftClickButton, middleClickButton, rightClickButton, leftClickButtons, rightClickButtons, middleClickButtons, click, mouseOver, mouseDown, mouseUp, mouseUpTo, mouseMove, mouseMoveTo, mouseOut, clickOn, contextMenuOn, hoverOn, point, event };
//# sourceMappingURL=Mouse.d.ts.map