import { Arr, Id, Optional, Type } from '@ephox/katamari';
import { createFileList } from '../file/FileList';
import { getData } from './DataTransferItem';
import { createDataTransferItemList } from './DataTransferItemList';
import { isInProtectedMode, isInReadWriteMode, setReadWriteMode } from './Mode';
const imageId = Id.generate('image');
const validDropEffects = ['none', 'copy', 'link', 'move'];
const validEffectAlloweds = ['none', 'copy', 'copyLink', 'copyMove', 'link', 'linkMove', 'move', 'all', 'uninitialized'];
const setDragImage = (transfer, imageData) => {
    const dt = transfer;
    dt[imageId] = imageData;
};
const getDragImage = (transfer) => {
    const dt = transfer;
    return Optional.from(dt[imageId]);
};
const normalize = (format) => {
    const lcFormat = format.toLowerCase();
    if (lcFormat === 'text') {
        return 'text/plain';
    }
    else if (lcFormat === 'url') {
        return 'text/uri-list';
    }
    else {
        return lcFormat;
    }
};
const createDataTransfer = () => {
    let dropEffect = 'move';
    let effectAllowed = 'all';
    const dataTransfer = {
        get dropEffect() {
            return dropEffect;
        },
        set dropEffect(effect) {
            if (Arr.contains(validDropEffects, effect)) {
                dropEffect = effect;
            }
        },
        get effectAllowed() {
            return effectAllowed;
        },
        set effectAllowed(allowed) {
            if (Arr.contains(validEffectAlloweds, allowed)) {
                effectAllowed = allowed;
            }
        },
        get items() {
            return items;
        },
        get files() {
            if (isInProtectedMode(dataTransfer)) {
                return createFileList([]);
            }
            const files = Arr.bind(Arr.from(items), (item) => {
                if (item.kind === 'file') {
                    const file = item.getAsFile();
                    return Type.isNull(file) ? [] : [file];
                }
                else {
                    return [];
                }
            });
            return createFileList(files);
        },
        get types() {
            const types = Arr.map(Arr.from(items), (item) => item.type);
            const hasFiles = Arr.exists(Arr.from(items), (item) => item.kind === 'file');
            return types.concat(hasFiles ? ['Files'] : []);
        },
        setDragImage: (image, x, y) => {
            if (isInReadWriteMode(dataTransfer)) {
                setDragImage(dataTransfer, { image, x, y });
            }
        },
        getData: (format) => {
            if (isInProtectedMode(dataTransfer)) {
                return '';
            }
            return Arr.find(Arr.from(items), (item) => item.type === normalize(format)).bind((item) => getData(item)).getOr('');
        },
        setData: (format, data) => {
            if (isInReadWriteMode(dataTransfer)) {
                dataTransfer.clearData(normalize(format));
                items.add(data, normalize(format));
            }
        },
        clearData: (format) => {
            if (isInReadWriteMode(dataTransfer)) {
                if (Type.isString(format)) {
                    const normalizedFormat = normalize(format);
                    Arr.findIndex(Arr.from(items), (item) => item.type === normalizedFormat).each((idx) => {
                        items.remove(idx);
                    });
                }
                else {
                    for (let i = items.length - 1; i >= 0; i--) {
                        if (items[i].kind === 'string') {
                            items.remove(i);
                        }
                    }
                }
            }
        }
    };
    const items = createDataTransferItemList(dataTransfer);
    setReadWriteMode(dataTransfer);
    return dataTransfer;
};
export { createDataTransfer, getDragImage };
//# sourceMappingURL=DataTransfer.js.map