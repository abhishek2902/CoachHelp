import { Fun } from '@ephox/katamari';
import { PlatformDetection } from '@ephox/sand';
const isNewKeyModifiers = (modifiers) => 'shiftKey' in modifiers || 'metaKey' in modifiers || 'ctrlKey' in modifiers || 'altKey' in modifiers;
const newModifiers = (modifiers) => isNewKeyModifiers(modifiers) ? modifiers :
    { shiftKey: modifiers.shift, metaKey: modifiers.meta, ctrlKey: modifiers.ctrl, altKey: modifiers.alt };
// Take from Orwellophile's answer on
// http://stackoverflow.com/questions/10455626/keydown-simulation-in-chrome-fires-normally-but-not-the-correct-key
const keyevent = (type, doc, value, modifiers, focus) => {
    const domDoc = doc.dom;
    const mod = newModifiers(modifiers);
    const oEvent = domDoc.createEvent('KeyboardEvent');
    const getter = () => value;
    const defineGetter = (obj, key, propGetter) => {
        Object.defineProperty(obj, key, { get: propGetter, enumerable: true });
    };
    const dispatcher = focus !== undefined ? focus : doc;
    const platform = PlatformDetection.detect();
    if (platform.browser.isSafari()) {
        safari(type, doc, value, mod, dispatcher);
    }
    else {
        if (platform.browser.isChromium() || platform.browser.isFirefox()) {
            if (type === 'keypress') {
                defineGetter(oEvent, 'charCode', getter);
            }
            defineGetter(oEvent, 'keyCode', getter);
            defineGetter(oEvent, 'which', getter);
            defineGetter(oEvent, 'shiftKey', () => mod.shiftKey === true);
            defineGetter(oEvent, 'metaKey', () => mod.metaKey === true);
            defineGetter(oEvent, 'ctrlKey', () => mod.ctrlKey === true);
            defineGetter(oEvent, 'altKey', () => mod.altKey === true);
        }
        const canBubble = true;
        const cancellable = true;
        const ctrlKey = mod.ctrlKey === true;
        const altKey = mod.altKey === true;
        const shiftKey = mod.shiftKey === true;
        const metaKey = mod.metaKey === true;
        // this is unknown to typescript
        const anyEvent = oEvent;
        if (anyEvent.initKeyboardEvent) {
            anyEvent.initKeyboardEvent(type, canBubble, cancellable, domDoc.defaultView, ctrlKey, altKey, shiftKey, metaKey, value, value);
        }
        else {
            anyEvent.initKeyEvent(type, canBubble, cancellable, domDoc.defaultView, ctrlKey, altKey, shiftKey, metaKey, value, type === 'keypress' && platform.browser.isFirefox() ? value : 0);
        }
        dispatcher.dom.dispatchEvent(oEvent);
    }
};
const safari = (type, doc, value, modifiers, dispatcher) => {
    const oEvent = doc.dom.createEvent('Events');
    oEvent.initEvent(type, true, true);
    if (type === 'keypress') {
        oEvent.charCode = value;
    }
    oEvent.which = value;
    oEvent.keyCode = value;
    oEvent.shiftKey = modifiers.shiftKey === true;
    oEvent.ctrlKey = modifiers.ctrlKey === true;
    oEvent.metaKey = modifiers.metaKey === true;
    oEvent.altKey = modifiers.altKey === true;
    oEvent.getModifierState = Fun.never;
    dispatcher.dom.dispatchEvent(oEvent);
};
export { newModifiers, keyevent };
//# sourceMappingURL=FakeKeys.js.map