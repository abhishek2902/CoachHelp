import { TestLabel } from '@ephox/bedrock-client';
import { Testable } from '@ephox/dispute';
import { SugarElement } from '@ephox/sugar';
import { StructAssert } from '../assertions/ApproxStructures';
import { Chain } from './Chain';
import { Step } from './Step';
declare const assertHtml: (label: TestLabel, expected: string, actual: string) => void;
declare const assertStructure: (label: TestLabel, expected: StructAssert, container: SugarElement<Node>) => void;
declare const assertHtmlStructure: (label: TestLabel, expected: string, actual: string) => void;
declare const assertPresence: (label: TestLabel, expected: Record<string, number>, container: SugarElement<Node>) => void;
declare const assertEq: <T>(message: TestLabel, expected: T, actual: T, tt?: Testable.Testable<T>) => void;
declare const assertDomEq: (label: TestLabel, expected: SugarElement<Node>, actual: SugarElement<Node>) => void;
declare const sAssertEq: <T, V>(label: TestLabel, expected: V, actual: V) => Step<T, T>;
declare const sAssertHtml: <T>(label: TestLabel, expected: string, actual: string) => Step<T, T>;
declare const sAssertPresence: <T>(label: TestLabel, expected: Record<string, number>, container: SugarElement<Node>) => Step<T, T>;
declare const sAssertStructure: <T>(label: TestLabel, expected: StructAssert, container: SugarElement<Node>) => Step<T, T>;
declare const cAssertEq: <T>(label: string, expected: T) => Chain<T, T>;
declare const cAssertDomEq: (label: string, expected: SugarElement<Node>) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cAssertHtml: (label: string, expected: string) => Chain<string, string>;
declare const cAssertPresence: (label: string, expected: Record<string, number>) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cAssertHtmlStructure: (label: string, expected: string) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cAssertStructure: (label: string, expected: StructAssert) => Chain<SugarElement<Node>, SugarElement<Node>>;
export { assertEq, assertDomEq, assertHtml, assertPresence, assertHtmlStructure, assertStructure, sAssertEq, sAssertHtml, sAssertPresence, sAssertStructure, cAssertEq, cAssertDomEq, cAssertHtml, cAssertPresence, cAssertHtmlStructure, cAssertStructure };
//# sourceMappingURL=Assertions.d.ts.map