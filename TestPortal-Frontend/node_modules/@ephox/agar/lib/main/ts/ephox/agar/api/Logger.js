import { Arr } from '@ephox/katamari';
import * as ErrorTypes from '../alien/ErrorTypes';
import { Step } from './Step';
import { addLogEntry, popLogLevel, pushLogLevel } from './TestLogs';
const t = (label, f) => {
    const enrich = (err) => ErrorTypes.enrichWith(label, err);
    return Step.raw((value, next, die, logs) => {
        const updatedLogs = pushLogLevel(addLogEntry(logs, label));
        const dieWith = (err, newLogs) => die(enrich(err), popLogLevel(newLogs));
        try {
            return f.runStep(value, (v, newLogs) => next(v, popLogLevel(newLogs)), dieWith, updatedLogs);
        }
        catch (err) {
            dieWith(err, updatedLogs);
        }
    });
};
const sync = (label, f) => {
    const enrich = (err) => ErrorTypes.enrichWith(label, err);
    try {
        return f();
    }
    catch (err) {
        throw enrich(err);
    }
};
const ts = (label, fs) => {
    if (fs.length === 0) {
        return fs;
    }
    return Arr.map(fs, (f, i) => t(label + '(' + i + ')', f));
};
const spec = (msg) => {
    // TMP, WIP
    // eslint-disable-next-line no-console
    console.log(msg);
};
export { t, ts, sync, spec };
//# sourceMappingURL=Logger.js.map