import { SugarElement } from '@ephox/sugar';
import { getDragImage } from '../datatransfer/DataTransfer';
import { Chain } from './Chain';
import { Step } from './Step';
interface Item {
    data: string;
    type: string;
}
declare const isDraggable: (element: SugarElement<Element>) => boolean;
declare const dragnDrop: (from: SugarElement<Element>, to: SugarElement<Element>, prevented?: boolean) => void;
declare const dropFiles: (files: File[], to: SugarElement<Element>, prevented?: boolean) => void;
declare const dropItems: (items: Item[], to: SugarElement<Element>, prevented?: boolean) => void;
declare const cDragnDrop: <T extends Element>(fromSelector: string, toSelector: string, prevented?: boolean) => Chain<SugarElement<T>, SugarElement<T>>;
declare const sDragnDrop: <T>(fromSelector: string, toSelector: string, prevented?: boolean) => Step<T, T>;
declare const pDragnDrop: (fromSelector: string, toSelector: string, prevented?: boolean) => Promise<SugarElement<HTMLElement>>;
declare const sDropFiles: <T>(files: File[], toSelector: string, prevented?: boolean) => Step<T, T>;
declare const cDropFiles: <T extends Element>(files: File[], prevented?: boolean) => Chain<SugarElement<T>, SugarElement<T>>;
declare const pDropFiles: <T extends Element>(elm: SugarElement<T>, files: File[], prevented?: boolean) => Promise<SugarElement<T>>;
declare const sDropItems: <T>(items: Item[], toSelector: string, prevented?: boolean) => Step<T, T>;
declare const cDropItems: <T extends Element>(items: Item[], prevented?: boolean) => Chain<SugarElement<T>, SugarElement<T>>;
declare const pDropItems: <T extends Element>(elm: SugarElement<T>, items: Item[], prevented?: boolean) => Promise<SugarElement<T>>;
export { isDraggable, dragnDrop, dropFiles, dropItems, cDragnDrop, sDragnDrop, pDragnDrop, sDropFiles, cDropFiles, pDropFiles, sDropItems, cDropItems, pDropItems, getDragImage };
//# sourceMappingURL=DragnDrop.d.ts.map