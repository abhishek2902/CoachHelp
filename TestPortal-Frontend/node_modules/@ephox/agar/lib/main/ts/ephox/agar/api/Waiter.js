import { Chain } from './Chain';
import * as Guard from './Guard';
import { Step } from './Step';
const defaultAmount = 3000;
const defaultInterval = 10;
const toStep = (p) => Step.stateful((input, next) => {
    next(p(input));
});
const sTryUntilPredicate = (label, p, interval = defaultInterval, amount = defaultAmount) => sTryUntil(label, Step.predicate(p), interval, amount);
const sTryUntil = (label, step, interval = defaultInterval, amount = defaultAmount) => Step.control(step, Guard.tryUntil(label, interval, amount));
const sTryUntilNot = (label, step, interval = defaultInterval, amount = defaultAmount) => Step.control(step, Guard.tryUntilNot(label, interval, amount));
const sTimeout = (label, step, limit = defaultAmount) => Step.control(step, Guard.timeout(label, limit));
const cTryUntilPredicate = (label, p, interval = defaultInterval, amount = defaultAmount) => cTryUntil(label, Chain.predicate(p), interval, amount);
const cTryUntil = (label, chain, interval = defaultInterval, amount = defaultAmount) => Chain.control(chain, Guard.tryUntil(label, interval, amount));
const cTryUntilNot = (label, chain, interval = defaultInterval, amount = defaultAmount) => Chain.control(chain, Guard.tryUntilNot(label, interval, amount));
const cTimeout = (label, chain, limit = defaultAmount) => Chain.control(chain, Guard.timeout(label, limit));
const pTryUntilPredicate = (label, p, interval = defaultInterval, amount = defaultAmount) => Step.toPromise(sTryUntilPredicate(label, p, interval, amount))(undefined);
const pTryUntil = (label, p, interval = defaultInterval, amount = defaultAmount) => Step.toPromise(sTryUntil(label, toStep(p), interval, amount))(undefined);
const pTryUntilNot = (label, p, interval = defaultInterval, amount = defaultAmount) => Step.toPromise(sTryUntilNot(label, Step.sync(p), interval, amount))(undefined);
const pTimeout = (label, p, limit = defaultAmount) => Step.toPromise(sTimeout(label, toStep(p), limit))(undefined);
const pWait = (time) => Step.toPromise(Step.wait(time))(undefined);
export { sTryUntilPredicate, sTryUntil, sTryUntilNot, sTimeout, cTryUntilPredicate, cTryUntil, cTryUntilNot, cTimeout, pTryUntilPredicate, pTryUntil, pTryUntilNot, pTimeout, pWait };
//# sourceMappingURL=Waiter.js.map