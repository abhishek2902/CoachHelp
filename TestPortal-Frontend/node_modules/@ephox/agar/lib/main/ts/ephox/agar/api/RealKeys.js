import { Adt, Arr, Optional } from '@ephox/katamari';
import { newModifiers } from '../keyboard/FakeKeys';
import * as SeleniumAction from '../server/SeleniumAction';
const adt = Adt.generate([
    { combo: ['modifiers', 'letter'] },
    { text: ['s'] },
    { backspace: [] }
]);
const modifierList = (obj) => ({
    ctrlKey: Optional.from(obj.ctrlKey),
    metaKey: Optional.from(obj.metaKey),
    shiftKey: Optional.from(obj.shiftKey),
    altKey: Optional.from(obj.altKey)
});
const toSimpleFormat = (keys) => Arr.map(keys, (key) => key.fold((modifiers, letter) => ({
    combo: {
        ctrlKey: modifiers.ctrlKey.getOr(false),
        shiftKey: modifiers.shiftKey.getOr(false),
        metaKey: modifiers.metaKey.getOr(false),
        altKey: modifiers.altKey.getOr(false),
        key: letter
    }
}), (s) => ({ text: s }), () => ({ text: '\u0008' })));
const sSendKeysOn = (selector, keys) => SeleniumAction.sPerform('/keys', {
    selector,
    keys: toSimpleFormat(keys)
});
const pSendKeysOn = (selector, keys) => SeleniumAction.pPerform('/keys', {
    selector,
    keys: toSimpleFormat(keys)
});
const combo = (modifiers, letter) => {
    const mods = modifierList(newModifiers(modifiers));
    return adt.combo(mods, letter);
};
const backspace = adt.backspace;
const text = adt.text;
export const RealKeys = {
    combo,
    backspace,
    text,
    sSendKeysOn,
    pSendKeysOn
    // TODO: sSendKeysTo (and sSendKeys) which tags the element so that it can pass through a selector
};
//# sourceMappingURL=RealKeys.js.map