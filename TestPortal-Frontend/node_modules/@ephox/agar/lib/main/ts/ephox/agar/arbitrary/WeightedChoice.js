import { Arr, Obj, Optional } from '@ephox/katamari';
import * as fc from 'fast-check';
const weighted = (list, total) => ({
    list,
    total
});
const choose = (candidates) => {
    const result = Arr.foldl(candidates, (rest, d) => {
        const newTotal = rest.total + d.weight;
        const merged = {
            ...d,
            accWeight: newTotal
        };
        return {
            total: newTotal,
            list: rest.list.concat([merged])
        };
    }, { list: [], total: 0 });
    return weighted(result.list, result.total);
};
const gChoose = (weighted) => fc.float({ min: 0, max: weighted.total }).map((w) => {
    const raw = Arr.find(weighted.list, (d) => w <= d.accWeight);
    const keys = raw.map(Obj.keys).getOr([]);
    return keys.length === ['weight', 'accWeight'].length ? Optional.none() : raw;
});
const generator = (candidates) => {
    const list = choose(candidates);
    return gChoose(list);
};
export { generator };
//# sourceMappingURL=WeightedChoice.js.map