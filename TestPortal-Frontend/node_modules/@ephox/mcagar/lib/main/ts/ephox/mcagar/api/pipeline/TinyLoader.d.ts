import { SugarElement } from '@ephox/sugar';
import * as Loader from '../../loader/Loader';
type FailureCallback = Loader.FailureCallback;
type SuccessCallback = Loader.SuccessCallback;
declare const setupLight: (callback: Loader.RunCallback, settings: Record<string, any>, success: Loader.SuccessCallback, failure: Loader.FailureCallback) => void;
declare const setup: (callback: Loader.RunCallback, settings: Record<string, any>, success: Loader.SuccessCallback, failure: Loader.FailureCallback) => void;
declare const setupFromElement: (callback: Loader.RunCallback, settings: Record<string, any>, element: SugarElement<Element>, success: Loader.SuccessCallback, failure: Loader.FailureCallback) => void;
declare const setupInShadowRoot: (callback: (editor: any, shadowRoot: SugarElement<ShadowRoot>, success: SuccessCallback, failure: FailureCallback) => void, settings: Record<string, any>, success: Loader.SuccessCallback, failure: Loader.FailureCallback) => void;
/** Runs the callback with an editor in the body, and then with an editor in a shadow root. Lets you test both scenarios. */
declare const setupInBodyAndShadowRoot: (callback: Loader.RunCallback, settings: Record<string, any>, success: Loader.SuccessCallback, failure: Loader.FailureCallback) => void;
export { setup, setupLight, setupFromElement, setupInShadowRoot, setupInBodyAndShadowRoot };
//# sourceMappingURL=TinyLoader.d.ts.map