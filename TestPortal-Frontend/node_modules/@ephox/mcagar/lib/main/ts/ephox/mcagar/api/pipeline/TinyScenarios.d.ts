import { Step } from '@ephox/agar';
import { SimRange, SugarElement } from '@ephox/sugar';
import * as fc from 'fast-check';
import { Editor } from '../../alien/EditorTypes';
type ContentGenerator = fc.Arbitrary<SugarElement<HTMLElement>>;
interface SelectionExclusions {
    readonly containers: (container: SugarElement<Node>) => boolean;
}
interface ArbScenarioOptions {
    readonly exclusions: SelectionExclusions;
}
interface AsyncPropertyOptions {
    readonly scenario: ArbScenarioOptions;
    readonly property: fc.Parameters;
}
interface Scenario {
    readonly input: string;
    readonly selection: SimRange;
}
export interface TinyScenarios {
    readonly genScenario: (genContent: ContentGenerator, selectionExclusions: SelectionExclusions) => fc.Arbitrary<Scenario>;
    readonly arbScenario: (genContent: ContentGenerator, options: ArbScenarioOptions) => fc.Arbitrary<Scenario>;
    readonly sAsyncProperty: <T>(label: string, generator: ContentGenerator, step: Step<Scenario, any>, options: AsyncPropertyOptions) => Step<T, T>;
}
export declare const TinyScenarios: (editor: Editor) => TinyScenarios;
export {};
//# sourceMappingURL=TinyScenarios.d.ts.map