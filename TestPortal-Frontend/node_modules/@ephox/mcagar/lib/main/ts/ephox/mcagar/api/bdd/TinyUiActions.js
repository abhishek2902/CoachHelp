import { Keyboard, Mouse, Touch, UiFinder } from '@ephox/agar';
import { Type } from '@ephox/katamari';
import { SugarShadowDom } from '@ephox/sugar';
import { getThemeSelectors } from '../ThemeSelectors';
import { TinyDom } from '../TinyDom';
const getUiDoc = (editor) => SugarShadowDom.getRootNode(TinyDom.targetElement(editor));
const getUiRoot = (editor) => SugarShadowDom.getContentContainer(getUiDoc(editor));
const getToolbarRoot = (editor) => {
    const editorContainerRoot = TinyDom.container(editor);
    const elem = UiFinder.findIn(editorContainerRoot, getThemeSelectors().toolBarSelector(editor));
    return elem.getOrDie();
};
const getMenuRoot = (editor) => {
    const editorContainerRoot = TinyDom.container(editor);
    const elem = UiFinder.findIn(editorContainerRoot, getThemeSelectors().menuBarSelector);
    return elem.getOrDie();
};
const clickOnToolbar = (editor, selector) => {
    const container = getToolbarRoot(editor);
    const elem = UiFinder.findIn(container, selector).getOrDie();
    Mouse.click(elem);
    return elem;
};
const tapOnToolbar = (editor, selector) => {
    const container = getToolbarRoot(editor);
    const elem = UiFinder.findIn(container, selector).getOrDie();
    Touch.touchStart(elem);
    Touch.touchEnd(elem);
    return elem;
};
const clickOnMenu = (editor, selector) => {
    const container = getMenuRoot(editor);
    const elem = UiFinder.findIn(container, selector).getOrDie();
    Mouse.click(elem);
    return elem;
};
const clickOnUi = (editor, selector) => {
    const elem = UiFinder.findIn(getUiRoot(editor), selector).getOrDie();
    Mouse.click(elem);
    return elem;
};
const clickDialogButton = (editor, selector, buttonSelector) => {
    const dialog = UiFinder.findIn(getUiRoot(editor), selector).getOrDie();
    const button = UiFinder.findIn(dialog, buttonSelector).getOrDie();
    Mouse.click(button);
};
const submitDialog = (editor, selector) => {
    const dialogSelector = Type.isUndefined(selector) ? getThemeSelectors().dialogSelector : selector;
    clickDialogButton(editor, dialogSelector, getThemeSelectors().dialogSubmitSelector);
};
const cancelDialog = (editor, selector) => {
    const dialogSelector = Type.isUndefined(selector) ? getThemeSelectors().dialogSelector : selector;
    clickDialogButton(editor, dialogSelector, getThemeSelectors().dialogCancelSelector);
};
const closeDialog = (editor, selector) => {
    const dialogSelector = Type.isUndefined(selector) ? getThemeSelectors().dialogSelector : selector;
    clickDialogButton(editor, dialogSelector, getThemeSelectors().dialogCloseSelector);
};
const pWaitForUi = (editor, selector) => UiFinder.pWaitFor(`Waiting for a UI element matching '${selector}' to exist`, getUiRoot(editor), selector);
const pWaitForPopup = (editor, selector) => UiFinder.pWaitForVisible(`Waiting for a popup matching '${selector}' to be visible`, getUiRoot(editor), selector);
const pWaitForDialog = (editor, selector) => {
    const dialogSelector = Type.isUndefined(selector) ? getThemeSelectors().dialogSelector : selector;
    return UiFinder.pWaitForVisible(`Waiting for a dialog matching '${dialogSelector}' to be visible`, getUiRoot(editor), dialogSelector);
};
const pTriggerContextMenu = async (editor, target, menu) => {
    Mouse.contextMenuOn(TinyDom.body(editor), target);
    await pWaitForPopup(editor, menu);
};
const keydown = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeydown(getUiDoc(editor), keyvalue, modifiers);
const keyup = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeyup(getUiDoc(editor), keyvalue, modifiers);
const keypress = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeypress(getUiDoc(editor), keyvalue, modifiers);
const keystroke = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeystroke(getUiDoc(editor), keyvalue, modifiers);
export { clickOnToolbar, clickOnMenu, clickOnUi, tapOnToolbar, submitDialog, cancelDialog, closeDialog, keydown, keypress, keystroke, keyup, pWaitForDialog, pWaitForPopup, pWaitForUi, pTriggerContextMenu, getUiRoot };
//# sourceMappingURL=TinyUiActions.js.map