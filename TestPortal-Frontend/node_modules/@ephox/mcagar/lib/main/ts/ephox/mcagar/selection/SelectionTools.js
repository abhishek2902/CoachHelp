import { Chain, Cursors } from '@ephox/agar';
import { Traverse } from '@ephox/sugar';
const toDomRange = (range) => {
    const doc = Traverse.owner(range.start);
    const rng = doc.dom.createRange();
    rng.setStart(range.start.dom, range.soffset);
    rng.setEnd(range.finish.dom, range.foffset);
    return rng;
};
const createDomSelection = (container, sPath, soffset, fPath, foffset) => {
    const path = Cursors.path({
        startPath: sPath,
        soffset,
        finishPath: fPath,
        foffset
    });
    return toDomRange(Cursors.calculate(container, path));
};
const createDomCursor = (container, elementPath, offset) => {
    const elm = Cursors.calculateOne(container, elementPath);
    return toDomRange(Cursors.range({
        start: elm,
        soffset: offset,
        finish: elm,
        foffset: offset
    }));
};
const createDomSelectionOf = (container, start, soffset, finish, foffset) => {
    return toDomRange(Cursors.range({
        start,
        soffset,
        finish,
        foffset
    }));
};
const cCreateDomSelection = (sPath, soffset, fPath, foffset) => {
    return Chain.mapper((container) => {
        return createDomSelection(container, sPath, soffset, fPath, foffset);
    });
};
const cCreateDomCursor = (elementPath, offset) => {
    return Chain.mapper((container) => {
        return createDomCursor(container, elementPath, offset);
    });
};
const cCreateDomSelectionOf = (start, soffset, finish, foffset) => {
    return Chain.mapper((container) => {
        return createDomSelectionOf(container, start, soffset, finish, foffset);
    });
};
export { createDomSelection, createDomCursor, createDomSelectionOf, cCreateDomSelection, cCreateDomCursor, cCreateDomSelectionOf };
//# sourceMappingURL=SelectionTools.js.map