import { Chain, Cursors } from '@ephox/agar';
import * as Options from '../../alien/Options';
import * as TinyAssertions from '../bdd/TinyAssertions';
import * as TinySelections from '../bdd/TinySelections';
const cNodeChanged = () => Chain.op((editor) => {
    editor.nodeChanged();
});
const cSetContent = (html) => {
    return Chain.op((editor) => {
        editor.setContent(html);
    });
};
const cSetRawContent = (html) => {
    return Chain.op((editor) => {
        editor.getBody().innerHTML = html;
    });
};
const cSetSelectionFrom = (spec) => {
    const path = Cursors.pathFrom(spec);
    return cSetSelection(path.startPath, path.soffset, path.finishPath, path.foffset);
};
const cSetCursor = (elementPath, offset) => {
    return cSetSelection(elementPath, offset, elementPath, offset);
};
const cSetSelection = (startPath, soffset, finishPath, foffset) => {
    return Chain.op((editor) => {
        TinySelections.setSelection(editor, startPath, soffset, finishPath, foffset);
    });
};
const cSetOption = (key, value) => {
    return Chain.op((editor) => {
        Options.set(editor, key, value);
    });
};
const cUnsetOption = (key) => {
    return Chain.op((editor) => {
        Options.unset(editor, key);
    });
};
const cSelect = (selector, path) => {
    return Chain.op((editor) => {
        TinySelections.select(editor, selector, path);
    });
};
const cGetContent = Chain.mapper((editor) => {
    return editor.getContent();
});
const cExecCommand = (command, value) => {
    return Chain.op((editor) => {
        editor.execCommand(command, false, value);
    });
};
const cAssertContent = (expected) => {
    return Chain.op((editor) => {
        TinyAssertions.assertContent(editor, expected);
    });
};
const cAssertContentPresence = (expected) => {
    return Chain.op((editor) => {
        TinyAssertions.assertContentPresence(editor, expected);
    });
};
const cAssertContentStructure = (expected) => {
    return Chain.op((editor) => {
        TinyAssertions.assertContentStructure(editor, expected);
    });
};
const cAssertSelection = (startPath, soffset, finishPath, foffset) => {
    return Chain.op((editor) => {
        TinyAssertions.assertSelection(editor, startPath, soffset, finishPath, foffset);
    });
};
const cFocus = Chain.op((editor) => {
    editor.focus();
});
export const ApiChains = {
    cSetContent,
    cGetContent,
    cSetSelectionFrom,
    cSetSelection,
    cSetSetting: cSetOption,
    cSetOption,
    cSetRawContent,
    cDeleteSetting: cUnsetOption,
    cUnsetOption,
    cSetCursor,
    cSelect,
    cExecCommand,
    cNodeChanged,
    cFocus,
    cAssertContent,
    cAssertContentPresence,
    cAssertContentStructure,
    cAssertSelection
};
//# sourceMappingURL=ApiChains.js.map