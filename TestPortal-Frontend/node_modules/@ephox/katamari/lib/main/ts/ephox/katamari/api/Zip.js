/** Creates an object from parallel arrays of key/value pairs.
 *  Keys and values must be the same length or a error is thrown.
 *  zipToObject :: ([key], [value]) -> {key1: value1, key2: value2 ...}
 */
export const zipToObject = (keys, values) => {
    if (keys.length !== values.length) {
        throw new Error(`Assertion failed: keys.length !== values.length (${keys.length} !== ${values.length})`);
    }
    const r = {};
    for (let i = 0; i < keys.length; i++) {
        r[keys[i]] = values[i];
    }
    return r;
};
/** zipToTuples :: ([key], [value]) -> [{k: key1, v: value1}, {k: key2, v: value2} ...] */
export const zipToTuples = (keys, values) => {
    if (keys.length !== values.length) {
        throw new Error(`Assertion failed: keys.length !== values.length (${keys.length} !== ${values.length})`);
    }
    const r = [];
    for (let i = 0; i < keys.length; i++) {
        r.push({ k: keys[i], v: values[i] });
    }
    return r;
};
//# sourceMappingURL=Zip.js.map