interface Constructor<T extends Object> {
    readonly prototype: T;
    readonly name: string;
}
export declare const is: <E extends Object>(value: any, constructor: Constructor<E>) => value is E;
export declare const isString: (value: any) => value is string;
export declare const isObject: (value: any) => value is Object;
export declare const isPlainObject: (value: unknown) => value is Object;
export declare const isArray: (value: any) => value is Array<unknown>;
export declare const isNull: (a: any) => a is null;
export declare const isBoolean: (value: any) => value is boolean;
export declare const isUndefined: (a: any) => a is undefined;
export declare const isNullable: (a: any) => a is null | undefined;
export declare const isNonNullable: <A>(a: A | null | undefined) => a is NonNullable<A>;
export declare const isFunction: (value: any) => value is Function;
export declare const isNumber: (value: any) => value is number;
export declare const isArrayOf: <E>(value: any, pred: (x: any) => x is E) => value is E[];
export {};
//# sourceMappingURL=Type.d.ts.map