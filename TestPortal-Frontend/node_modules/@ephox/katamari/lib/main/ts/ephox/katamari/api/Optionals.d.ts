import { Optional } from './Optional';
/**
 * **Is** the value stored inside this Optional object equal to `rhs`?
 */
export declare const is: <T>(lhs: Optional<T>, rhs: T, comparator?: (a: T, b: T) => boolean) => boolean;
/**
 * Are these two Optional objects equal? Equality here means either they're both
 * `Some` (and the values are equal under the comparator) or they're both `None`.
 */
export declare const equals: {
    <A, B>(lhs: Optional<A>, rhs: Optional<B>, comparator: (a: A, b: B) => boolean): boolean;
    <T>(lhs: Optional<T>, rhs: Optional<T>): boolean;
};
export declare const cat: <A>(arr: Optional<A>[]) => A[];
export declare const sequence: <A>(arr: ArrayLike<Optional<A>>) => Optional<A[]>;
/** @deprecated Use Arr.findMap instead. */
export declare const findMap: <A, B>(arr: ArrayLike<A>, f: (a: A, index: number) => Optional<B>) => Optional<B>;
/** Map each element of an array to an Optional and collect the results.
 *  If all results are "some", return Optional.some of the results.
 *  If any result is "none", return Optional.none
 */
export declare const traverse: <A, B>(arr: ArrayLike<A>, f: (a: A) => Optional<B>) => Optional<B[]>;
export declare const lift2: <A, B, C>(oa: Optional<A>, ob: Optional<B>, f: (a: A, b: B) => C) => Optional<C>;
export declare const lift3: <A, B, C, D>(oa: Optional<A>, ob: Optional<B>, oc: Optional<C>, f: (a: A, b: B, c: C) => D) => Optional<D>;
export declare const lift4: <A, B, C, D, E>(oa: Optional<A>, ob: Optional<B>, oc: Optional<C>, od: Optional<D>, f: (a: A, b: B, c: C, d: D) => E) => Optional<E>;
export declare const lift5: <A, B, C, D, E, F>(oa: Optional<A>, ob: Optional<B>, oc: Optional<C>, od: Optional<D>, oe: Optional<E>, f: (a: A, b: B, c: C, d: D, e: E) => F) => Optional<F>;
export declare const mapFrom: <A, B>(a: A | null | undefined, f: (a: A) => B) => Optional<B>;
export declare const bindFrom: <A, B>(a: A | null | undefined, f: (a: A) => Optional<B>) => Optional<B>;
export declare const flatten: <T>(oot: Optional<Optional<T>>) => Optional<T>;
export declare const someIf: <A>(b: boolean, a: A) => Optional<A>;
//# sourceMappingURL=Optionals.d.ts.map