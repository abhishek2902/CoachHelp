import { Optional } from './Optional';
/** Given a string and object, perform template-replacements on the string, as specified by the object.
 * Any template fields of the form ${name} are replaced by the string or number specified as obj["name"]
 * Based on Douglas Crockford's 'supplant' method for template-replace of strings. Uses different template format.
 */
export declare const supplant: (str: string, obj: Record<string, string | number>) => string;
export declare const removeLeading: (str: string, prefix: string) => string;
export declare const removeTrailing: (str: string, suffix: string) => string;
export declare const ensureLeading: (str: string, prefix: string) => string;
export declare const ensureTrailing: (str: string, suffix: string) => string;
export declare const contains: (str: string, substr: string, start?: number, end?: number) => boolean;
export declare const capitalize: (str: string) => string;
/** Does 'str' start with 'prefix'?
 *  Note: all strings start with the empty string.
 *        More formally, for all strings x, startsWith(x, "").
 *        This is so that for all strings x and y, startsWith(y + x, y)
 */
export declare const startsWith: (str: string, prefix: string) => boolean;
/** Does 'str' end with 'suffix'?
 *  Note: all strings end with the empty string.
 *        More formally, for all strings x, endsWith(x, "").
 *        This is so that for all strings x and y, endsWith(x + y, y)
 */
export declare const endsWith: (str: string, suffix: string) => boolean;
/** removes all leading and trailing spaces */
export declare const trim: (s: string) => string;
export declare const lTrim: (s: string) => string;
export declare const rTrim: (s: string) => string;
export declare const isNotEmpty: (s: string) => boolean;
export declare const isEmpty: (s: string) => boolean;
export declare const repeat: (s: string, count: number) => string;
export declare const fromCodePoint: (...codePoints: number[]) => string;
export declare const toInt: (value: string, radix?: number) => Optional<number>;
export declare const toFloat: (value: string) => Optional<number>;
//# sourceMappingURL=Strings.d.ts.map