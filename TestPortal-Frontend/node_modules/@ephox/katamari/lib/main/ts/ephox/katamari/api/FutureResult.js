import { Future } from './Future';
import { Result } from './Result';
const wrap = (delegate) => {
    const toCached = () => {
        return wrap(delegate.toCached());
    };
    const bindFuture = (f) => {
        return wrap(delegate.bind((resA) => resA.fold((err) => (Future.pure(Result.error(err))), (a) => f(a))));
    };
    const bindResult = (f) => {
        return wrap(delegate.map((resA) => resA.bind(f)));
    };
    const mapResult = (f) => {
        return wrap(delegate.map((resA) => resA.map(f)));
    };
    const mapError = (f) => {
        return wrap(delegate.map((resA) => resA.mapError(f)));
    };
    const foldResult = (whenError, whenValue) => {
        return delegate.map((res) => res.fold(whenError, whenValue));
    };
    const withTimeout = (timeout, errorThunk) => {
        return wrap(Future.nu((callback) => {
            let timedOut = false;
            const timer = setTimeout(() => {
                timedOut = true;
                callback(Result.error(errorThunk()));
            }, timeout);
            delegate.get((result) => {
                if (!timedOut) {
                    clearTimeout(timer);
                    callback(result);
                }
            });
        }));
    };
    return {
        ...delegate,
        toCached,
        bindFuture,
        bindResult,
        mapResult,
        mapError,
        foldResult,
        withTimeout
    };
};
const nu = (worker) => {
    return wrap(Future.nu(worker));
};
const value = (value) => {
    return wrap(Future.pure(Result.value(value)));
};
const error = (error) => {
    return wrap(Future.pure(Result.error(error)));
};
const fromResult = (result) => {
    return wrap(Future.pure(result));
};
const fromFuture = (future) => {
    return wrap(future.map(Result.value));
};
const fromPromise = (promise) => {
    return nu((completer) => {
        promise.then((value) => {
            completer(Result.value(value));
        }, (error) => {
            completer(Result.error(error));
        });
    });
};
export const FutureResult = {
    nu,
    wrap,
    pure: value,
    value,
    error,
    fromResult,
    fromFuture,
    fromPromise
};
//# sourceMappingURL=FutureResult.js.map