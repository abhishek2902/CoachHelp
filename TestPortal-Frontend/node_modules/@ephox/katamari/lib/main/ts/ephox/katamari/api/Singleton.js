import { Cell } from './Cell';
import * as Fun from './Fun';
import { Optional } from './Optional';
const singleton = (doRevoke) => {
    const subject = Cell(Optional.none());
    const revoke = () => subject.get().each(doRevoke);
    const clear = () => {
        revoke();
        subject.set(Optional.none());
    };
    const isSet = () => subject.get().isSome();
    const get = () => subject.get();
    const set = (s) => {
        revoke();
        subject.set(Optional.some(s));
    };
    return {
        clear,
        isSet,
        get,
        set
    };
};
export const repeatable = (delay) => {
    const intervalId = Cell(Optional.none());
    const revoke = () => intervalId.get().each((id) => clearInterval(id));
    const clear = () => {
        revoke();
        intervalId.set(Optional.none());
    };
    const isSet = () => intervalId.get().isSome();
    const get = () => intervalId.get();
    const set = (functionToRepeat) => {
        revoke();
        intervalId.set(Optional.some(setInterval(functionToRepeat, delay)));
    };
    return {
        clear,
        isSet,
        get,
        set,
    };
};
export const destroyable = () => singleton((s) => s.destroy());
export const unbindable = () => singleton((s) => s.unbind());
export const api = () => {
    const subject = destroyable();
    const run = (f) => subject.get().each(f);
    return {
        ...subject,
        run
    };
};
export const value = () => {
    const subject = singleton(Fun.noop);
    const on = (f) => subject.get().each(f);
    return {
        ...subject,
        on
    };
};
//# sourceMappingURL=Singleton.js.map