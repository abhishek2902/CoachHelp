import { Adt } from './Adt';
import * as Fun from './Fun';
const adt = Adt.generate([
    { starts: ['value', 'f'] },
    { pattern: ['regex', 'f'] },
    { contains: ['value', 'f'] },
    { exact: ['value', 'f'] },
    { all: [] },
    { not: ['stringMatch'] }
]);
const caseInsensitive = (val) => {
    return val.toLowerCase();
};
const caseSensitive = Fun.identity;
/** matches :: (StringMatch, String) -> Boolean */
const matches = (subject, str) => {
    return subject.fold((value, f) => f(str).indexOf(f(value)) === 0, (regex, f) => regex.test(f(str)), (value, f) => f(str).indexOf(f(value)) >= 0, (value, f) => f(str) === f(value), Fun.always, (other) => !matches(other, str));
};
const cata = (subject, s, p, c, e, a, n) => {
    return subject.fold(s, p, c, e, a, n);
};
export const StringMatch = {
    starts: adt.starts,
    pattern: adt.pattern,
    contains: adt.contains,
    exact: adt.exact,
    all: adt.all,
    not: adt.not,
    cata,
    matches,
    caseSensitive,
    caseInsensitive
};
//# sourceMappingURL=StringMatch.js.map