import * as Obj from './Obj';
import * as Type from './Type';
const shallow = (old, nu) => {
    return nu;
};
const deep = (old, nu) => {
    const bothObjects = Type.isPlainObject(old) && Type.isPlainObject(nu);
    return bothObjects ? deepMerge(old, nu) : nu;
};
const baseMerge = (merger) => {
    return (...objects) => {
        if (objects.length === 0) {
            throw new Error(`Can't merge zero objects`);
        }
        const ret = {};
        for (let j = 0; j < objects.length; j++) {
            const curObject = objects[j];
            for (const key in curObject) {
                if (Obj.has(curObject, key)) {
                    ret[key] = merger(ret[key], curObject[key]);
                }
            }
        }
        return ret;
    };
};
export const deepMerge = baseMerge(deep);
export const merge = baseMerge(shallow);
//# sourceMappingURL=Merger.js.map