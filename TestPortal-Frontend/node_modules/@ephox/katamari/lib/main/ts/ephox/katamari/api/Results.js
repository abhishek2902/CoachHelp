import { Adt } from './Adt';
import * as Arr from './Arr';
import * as Fun from './Fun';
const comparison = Adt.generate([
    { bothErrors: ['error1', 'error2'] },
    { firstError: ['error1', 'value2'] },
    { secondError: ['value1', 'error2'] },
    { bothValues: ['value1', 'value2'] }
]);
/** partition :: [Result a] -> { errors: [String], values: [a] } */
export const partition = (results) => {
    const errors = [];
    const values = [];
    Arr.each(results, (result) => {
        result.fold((err) => {
            errors.push(err);
        }, (value) => {
            values.push(value);
        });
    });
    return { errors, values };
};
export const compare = (result1, result2) => {
    return result1.fold((err1) => {
        return result2.fold((err2) => {
            return comparison.bothErrors(err1, err2);
        }, (val2) => {
            return comparison.firstError(err1, val2);
        });
    }, (val1) => {
        return result2.fold((err2) => {
            return comparison.secondError(val1, err2);
        }, (val2) => {
            return comparison.bothValues(val1, val2);
        });
    });
};
export const unite = (result) => result.fold(Fun.identity, Fun.identity);
export const is = (result, value) => result.exists((r) => r === value);
//# sourceMappingURL=Results.js.map