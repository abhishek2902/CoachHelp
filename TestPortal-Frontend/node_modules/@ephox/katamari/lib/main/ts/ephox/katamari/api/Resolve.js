import { Global } from './Global';
/** path :: ([String], JsObj?) -> JsObj */
export const path = (parts, scope) => {
    let o = scope !== undefined && scope !== null ? scope : Global;
    for (let i = 0; i < parts.length && o !== undefined && o !== null; ++i) {
        o = o[parts[i]];
    }
    return o;
};
/** resolve :: (String, JsObj?) -> JsObj */
export const resolve = (p, scope) => {
    const parts = p.split('.');
    return path(parts, scope);
};
/** step :: (JsObj, String) -> JsObj */
export const step = (o, part) => {
    if (o[part] === undefined || o[part] === null) {
        o[part] = {};
    }
    return o[part];
};
/** forge :: ([String], JsObj?) -> JsObj */
export const forge = (parts, target) => {
    let o = target !== undefined ? target : Global;
    for (let i = 0; i < parts.length; ++i) {
        o = step(o, parts[i]);
    }
    return o;
};
/** namespace :: (String, JsObj?) -> JsObj */
export const namespace = (name, target) => {
    const parts = name.split('.');
    return forge(parts, target);
};
//# sourceMappingURL=Resolve.js.map