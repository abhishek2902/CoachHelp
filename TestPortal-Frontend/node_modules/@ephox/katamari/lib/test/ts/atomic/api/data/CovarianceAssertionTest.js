import { describe, it } from '@ephox/bedrock-client';
import { assert } from 'chai';
import { Optional } from 'ephox/katamari/api/Optional';
import * as Optionals from 'ephox/katamari/api/Optionals';
import { Result } from 'ephox/katamari/api/Result';
import * as Results from 'ephox/katamari/api/Results';
// https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)
//
// We need to make sure that Optional<T> and Result<T, E> is, and remains, covariant
// with respect to T and E.
describe('atomic.katamari.api.data.CovarianceAssertionTest', () => {
    it('Optional is covariant', () => {
        const cat = { name: 'Loki', length: 5 };
        const optCat = Optional.some(cat);
        const optAnimal = optCat;
        // This assertion is just so that we can avoid the "unused variables" warnings
        // This test is more about making sure that the above code compiles
        assert.isTrue(Optionals.equals(optCat, optAnimal));
    });
    it('Result is covariant', () => {
        const cat = { name: 'Loki', length: 5 };
        const resCat = Result.value(cat);
        const resAnimal = resCat;
        // This assertion is just so that we can avoid the "unused variables" warnings
        // This test is more about making sure that the above code compiles
        assert.isNotNull(Results.compare(resCat, resAnimal));
    });
});
//# sourceMappingURL=CovarianceAssertionTest.js.map