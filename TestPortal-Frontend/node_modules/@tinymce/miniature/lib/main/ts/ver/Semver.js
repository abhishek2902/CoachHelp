const toInt = (str) => parseInt(str, 10);
const cmp = (a, b) => {
    const delta = a - b;
    if (delta === 0) {
        return 0 /* Comparison.EQ */;
    }
    return delta > 0 ? 1 /* Comparison.GT */ : -1 /* Comparison.LT */;
};
export const nu = (major, minor, patch) => ({ major, minor, patch });
export const parse = (versionString) => {
    const parts = /([0-9]+)\.([0-9]+)\.([0-9]+)(?:(\-.+)?)/.exec(versionString);
    return parts ? nu(toInt(parts[1]), toInt(parts[2]), toInt(parts[3])) : nu(0, 0, 0);
};
export const compare = (version1, version2) => {
    const cmp1 = cmp(version1.major, version2.major);
    if (cmp1 !== 0 /* Comparison.EQ */) {
        return cmp1;
    }
    const cmp2 = cmp(version1.minor, version2.minor);
    if (cmp2 !== 0 /* Comparison.EQ */) {
        return cmp2;
    }
    const cmp3 = cmp(version1.patch, version2.patch);
    if (cmp3 !== 0 /* Comparison.EQ */) {
        return cmp3;
    }
    return 0 /* Comparison.EQ */;
};
//# sourceMappingURL=Semver.js.map