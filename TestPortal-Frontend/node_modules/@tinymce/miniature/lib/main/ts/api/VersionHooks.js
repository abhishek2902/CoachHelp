import { after, afterEach, before } from '@ephox/bedrock-client';
import { Arr, Obj, Optional } from '@ephox/katamari';
import { TinyHooks } from '@ephox/mcagar';
import { load } from '../loader/Loader';
import { readPlugins, registerPlugins } from '../loader/Plugins';
const setupVersion = (version, setupModules, setupHook) => {
    let hasFailure = false;
    let plugins = Optional.none();
    const pluginNames = Obj.keys(setupModules);
    const modules = Arr.flatten(Obj.values(setupModules));
    before(function (done) {
        // Increase the default timeout to ensure we have time to load
        this.timeout(4000);
        // Store the original plugins
        plugins = Optional.some(readPlugins(pluginNames));
        // load the new version and restore the loaded plugins
        load(version, () => {
            plugins.each(registerPlugins);
            done();
        }, done);
    });
    const hook = setupHook(modules);
    afterEach(function () {
        var _a;
        if (((_a = this.currentTest) === null || _a === void 0 ? void 0 : _a.isFailed()) === true) {
            hasFailure = true;
        }
    });
    after(function (done) {
        // Increase the default timeout to ensure we have time to load
        this.timeout(4000);
        if (hasFailure) {
            done();
        }
        else {
            // load the latest version back into scope
            load('latest', () => {
                // Restore the original plugins
                plugins.each(registerPlugins);
                plugins = Optional.none();
                done();
            }, done);
        }
    });
    return hook;
};
const bddSetupVersion = (version, settings, setupModules = {}, focusOnInit = false) => {
    return setupVersion(version, setupModules, (modules) => {
        return TinyHooks.bddSetup(settings, modules, focusOnInit);
    });
};
const bddSetupVersionLight = (version, settings, setupModules = {}, focusOnInit = false) => {
    return setupVersion(version, setupModules, (modules) => {
        return TinyHooks.bddSetupLight(settings, modules, focusOnInit);
    });
};
const bddSetupVersionFromElement = (version, settings, setupElement, setupModules = {}, focusOnInit = false) => {
    return setupVersion(version, setupModules, (modules) => {
        return TinyHooks.bddSetupFromElement(settings, setupElement, modules, focusOnInit);
    });
};
const bddSetupVersionInShadowRoot = (version, settings, setupModules = {}, focusOnInit = false) => {
    return setupVersion(version, setupModules, (modules) => {
        return TinyHooks.bddSetupInShadowRoot(settings, modules, focusOnInit);
    });
};
export { bddSetupVersion, bddSetupVersionLight, bddSetupVersionFromElement, bddSetupVersionInShadowRoot };
//# sourceMappingURL=VersionHooks.js.map