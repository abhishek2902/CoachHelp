import { TinyHooks } from '@ephox/mcagar';
import { SugarElement } from '@ephox/sugar';
export interface Hook<T> {
    readonly editor: () => T;
}
export interface ShadowRootHook<T> extends Hook<T> {
    readonly shadowRoot: () => SugarElement<ShadowRoot>;
}
declare const bddSetupVersion: <T = any>(version: string, settings: Record<string, any>, setupModules?: Record<string, Array<() => void>>, focusOnInit?: boolean) => Hook<T>;
declare const bddSetupVersionLight: <T = any>(version: string, settings: Record<string, any>, setupModules?: Record<string, Array<() => void>>, focusOnInit?: boolean) => Hook<T>;
declare const bddSetupVersionFromElement: <T = any>(version: string, settings: Record<string, any>, setupElement: () => TinyHooks.SetupElement, setupModules?: Record<string, Array<() => void>>, focusOnInit?: boolean) => Hook<T>;
declare const bddSetupVersionInShadowRoot: <T = any>(version: string, settings: Record<string, any>, setupModules?: Record<string, Array<() => void>>, focusOnInit?: boolean) => ShadowRootHook<T>;
export { bddSetupVersion, bddSetupVersionLight, bddSetupVersionFromElement, bddSetupVersionInShadowRoot };
