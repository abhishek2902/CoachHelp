import { Pipeline, Step, TestLogs } from '@ephox/agar';
import { TinyLoader } from '@ephox/mcagar';
import * as Loader from '../loader/Loader';
import { readPlugins, registerPlugins, sRegisterPlugins } from '../loader/Plugins';
import * as TinyVersions from '../loader/Versions';
export const setupVersion = (version, testPlugins, callback, settings, success, failure, logs = TestLogs.init()) => {
    const plugins = readPlugins(testPlugins);
    Pipeline.async({}, [
        TinyVersions.sWithVersion(version, Step.raw((_, next, die, initLogs) => {
            registerPlugins(plugins);
            TinyLoader.setup((e, s, f) => callback(e, s, f, initLogs), settings, (v, nextLogs) => next(v, nextLogs || initLogs), (e, nextLogs) => die(e, nextLogs || initLogs));
        })),
        sRegisterPlugins(plugins)
    ], success, failure, logs);
};
export const sSetupVersion = (version, testPlugins, callback, settings) => Step.raw((_, next, die, initLogs) => setupVersion(version, testPlugins, (editor, onSuccess, onError, logs) => {
    Pipeline.async({}, [callback(editor)], onSuccess, onError, logs);
}, settings, next, die, initLogs));
export const sWithVersion = TinyVersions.sWithVersion;
export const pLoadVersion = (version) => {
    return new Promise((resolve, reject) => {
        Loader.load(version, resolve, reject);
    });
};
//# sourceMappingURL=VersionLoader.js.map