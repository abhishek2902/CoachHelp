import { Failure } from '@ephox/bedrock-common';
import * as AsyncActions from '../pipe/AsyncActions';
import * as GeneralActions from '../pipe/GeneralActions';
import { Pipe } from '../pipe/Pipe';
import { addLogging } from './Guard';
import { addLogEntry, TestLogs } from './TestLogs';
const raw = (f) => ({ runStep: Pipe(f) });
const stateful = (f) => raw((value, next, die, logs) => {
    f(value, (nextValue) => next(nextValue, logs), (err) => die(err, logs));
});
// Chiefly used for limiting things with timeouts.
const control = (step, guard) => raw((value, next, die, logs) => {
    guard(step.runStep, value, next, die, logs);
});
const sync = (f) => raw((value, next, die, logs) => {
    f();
    next(value, logs);
});
const async = (f) => raw((value, next, die, logs) => {
    f(() => next(value, logs), (err) => die(err, logs));
});
// Convenience functions
const debugging = sync(GeneralActions.debug);
const log = (message) => raw((value, next, die, logs) => {
    // eslint-disable-next-line no-console
    console.log(message);
    next(value, addLogEntry(logs, message));
});
const label = (label, chain) => control(chain, addLogging(label));
const wait = (amount) => async(AsyncActions.delay(amount));
const fail = (message) => async(AsyncActions.fail(message));
const pass = sync(GeneralActions.pass);
const predicate = (p) => stateful((value, next, die) => {
    p(value) ? next(value) : die('predicate did not succeed');
});
const toPromise = (step) => (a) => {
    return new Promise(((resolve, reject) => {
        step.runStep(a, (b, _logs) => {
            // TODO: What to do with logs? We lose them.
            resolve(b);
        }, (err, logs) => {
            reject(Failure.prepFailure(err, logs));
        }, TestLogs.init());
    }));
};
const fromPromise = (p) => Step.async((next, die) => {
    p().then(next, die);
});
export const Step = {
    stateful,
    control,
    sync,
    async,
    debugging,
    log,
    label,
    wait,
    fail,
    pass,
    raw,
    predicate,
    toPromise,
    fromPromise
};
//# sourceMappingURL=Step.js.map