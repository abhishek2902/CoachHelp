export declare enum TestLogEntryState {
    Original = 0,
    Started = 1,
    Finished = 2
}
export interface TestLogEntry {
    message: string;
    entries: TestLogEntry[];
    state: TestLogEntryState;
    trace: any;
}
export interface TestLogs {
    history: TestLogEntry[];
}
export declare const addLogEntry: (logs: TestLogs, message: string) => TestLogs;
export declare const pushLogLevel: (logs: TestLogs) => TestLogs;
export declare const popLogLevel: (logs: TestLogs) => TestLogs;
export declare const addStackTrace: (logs: TestLogs, err: {
    stack: any;
}) => TestLogs;
export declare const TestLogs: {
    getOrInit: (logs?: TestLogs) => TestLogs;
    init: () => TestLogs;
    initLogsWith: (history: TestLogEntry[]) => TestLogs;
    concat: (logs1: TestLogs, logs2: TestLogs) => TestLogs;
    addLogEntry: (logs: TestLogs, message: string) => TestLogs;
    single: (message: string) => TestLogs;
};
//# sourceMappingURL=TestLogs.d.ts.map