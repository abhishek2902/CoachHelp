import { Fun, Id } from '@ephox/katamari';
import { Attribute } from '@ephox/sugar';
import * as SeleniumAction from '../server/SeleniumAction';
import { Chain } from './Chain';
const BedrockIdAttribute = 'data-bedrockid';
const sActionOn = (selector, type) => SeleniumAction.sPerform('/mouse', {
    selector,
    type
});
const pActionOn = (selector, type) => SeleniumAction.pPerform('/mouse', {
    selector,
    type
});
const sMoveToOn = (selector) => sActionOn(selector, 'move');
const sDownOn = (selector) => sActionOn(selector, 'down');
const sUpOn = (selector) => sActionOn(selector, 'up');
const sClickOn = (selector) => sActionOn(selector, 'click');
const cAction = (action) => Chain.fromChains([
    Chain.mapper((selector) => ({
        selector,
        type: action
    })),
    SeleniumAction.cPerform('/mouse')
]);
const cClick = () => Chain.fromParent(Chain.mapper(Fun.identity), [
    Chain.fromChains([
        Chain.mapper((elem) => {
            const id = Id.generate('');
            Attribute.set(elem, BedrockIdAttribute, id);
            return `[${BedrockIdAttribute}="${id}"]`;
        }),
        cAction('click')
    ]),
    Chain.op((elem) => {
        Attribute.remove(elem, BedrockIdAttribute);
    })
]);
const pClickOn = (selector) => pActionOn(selector, 'click');
const pClick = async (elem) => {
    const id = Id.generate('');
    Attribute.set(elem, BedrockIdAttribute, id);
    const selector = `[${BedrockIdAttribute}="${id}"]`;
    try {
        return await pClickOn(selector);
    }
    finally {
        Attribute.remove(elem, BedrockIdAttribute);
    }
};
const pUpOn = (selector) => pActionOn(selector, 'up');
const pDownOn = (selector) => pActionOn(selector, 'down');
const pMoveToOn = (selector) => pActionOn(selector, 'click');
export { sMoveToOn, sDownOn, sUpOn, sClickOn, cClick, BedrockIdAttribute, pClickOn, pClick, pUpOn, pDownOn, pMoveToOn };
//# sourceMappingURL=RealMouse.js.map