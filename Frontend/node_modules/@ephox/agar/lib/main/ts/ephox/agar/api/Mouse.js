import { Fun } from '@ephox/katamari';
import { Focus } from '@ephox/sugar';
import * as Clicks from '../mouse/Clicks';
import { Chain } from './Chain';
import { Step } from './Step';
import * as UiFinder from './UiFinder';
const click = (element, settings = {}) => Clicks.click(settings)(element);
const mouseOver = (element, settings = {}) => Clicks.mouseOver(settings)(element);
const mouseDown = (element, settings = {}) => Clicks.mouseDown(settings)(element);
const mouseUp = (element, settings = {}) => Clicks.mouseUp(settings)(element);
const mouseMove = (element, settings = {}) => Clicks.mouseMove(settings)(element);
const mouseOut = (element, settings = {}) => Clicks.mouseOut(settings)(element);
const mouseMoveTo = (element, dx, dy, settings = {}) => Clicks.mouseMove({ ...settings, dx, dy })(element);
const mouseUpTo = (element, dx, dy, settings = {}) => Clicks.mouseUp({ ...settings, dx, dy })(element);
// Custom event creation
const cClickWith = Fun.compose(Chain.op, Clicks.click);
const cContextMenuWith = Fun.compose(Chain.op, Clicks.contextMenu);
const cMouseOverWith = Fun.compose(Chain.op, Clicks.mouseOver);
const cMouseDownWith = Fun.compose(Chain.op, Clicks.mouseDown);
const cMouseUpWith = Fun.compose(Chain.op, Clicks.mouseUp);
const cMouseMoveWith = Fun.compose(Chain.op, Clicks.mouseMove);
const cMouseOutWith = Fun.compose(Chain.op, Clicks.mouseOut);
// With delta position (shifted relative to top-left of component)
/**
 * @deprecated use cMouseUpWith({ dx, dy }) instead */
const cMouseUpTo = (dx, dy) => cMouseUpWith({ dx, dy });
/**
 * @deprecated use cMouseMoveWith({ dx, dy }) instead */
const cMouseMoveTo = (dx, dy) => cMouseMoveWith({ dx, dy });
// No extra settings
/**
 * @deprecated use cClickWith({ }) instead*/
const cClick = cClickWith({});
/**
 * @deprecated use cContextMenuWith({ }) instead */
const cContextMenu = cContextMenuWith({});
/**
 * @deprecated use cMouseOverWith({ }) instead */
const cMouseOver = cMouseOverWith({});
/**
 * @deprecated use cMouseDownWith({ }) instead */
const cMouseDown = cMouseDownWith({});
/**
 * @deprecated use cMouseUpWith({ }) instead */
const cMouseUp = cMouseUpWith({});
/**
 * @deprecated use cMouseMoveWith({ }) instead */
const cMouseMove = cMouseMoveWith({});
/**
 * @deprecated use cMouseOutWith({ }) instead */
const cMouseOut = cMouseOutWith({});
const triggerOn = (container, selector, action) => {
    const ele = UiFinder.findIn(container, selector).getOrDie();
    action(ele);
    return ele;
};
// Work with selectors
const sTriggerOn = (container, selector, action) => Step.sync(() => triggerOn(container, selector, action));
const clickOn = (container, selector) => triggerOn(container, selector, Clicks.trigger);
const hoverOn = (container, selector) => triggerOn(container, selector, mouseOver);
const contextMenuOn = (container, selector) => triggerOn(container, selector, Clicks.contextMenu({}));
const sClickOn = (container, selector) => sTriggerOn(container, selector, Clicks.trigger);
const sHoverOn = (container, selector) => sTriggerOn(container, selector, Clicks.mouseOver({}));
const sContextMenuOn = (container, selector) => sTriggerOn(container, selector, Clicks.contextMenu({}));
const cClickOn = (selector) => Chain.fromIsolatedChains([
    UiFinder.cFindIn(selector),
    cClick
]);
// True click utilities: mouse down / mouse up / click events all in one
const trueClick = (elem) => {
    // The closest event queue to a true Click
    Focus.focus(elem);
    mouseDown(elem);
    mouseUp(elem);
    Clicks.trigger(elem);
};
const trueClickOn = (container, selector) => {
    triggerOn(container, selector, trueClick);
};
const cTrueClick = Chain.op(trueClick);
const sTrueClickOn = (container, selector) => sTriggerOn(container, selector, trueClick);
// Low level exports
const leftClickButton = Clicks.leftClickButton;
const middleClickButton = Clicks.middleClickButton;
const rightClickButton = Clicks.rightClickButton;
const leftClickButtons = Clicks.leftClickButtons;
const rightClickButtons = Clicks.rightClickButtons;
const middleClickButtons = Clicks.middleClickButtons;
/**
 * @deprecated Use event instead */
const point = Clicks.point;
const event = Clicks.event;
export { cClickWith, cContextMenuWith, cMouseOverWith, cMouseDownWith, cMouseUpWith, cMouseMoveWith, cMouseOutWith, cClick, cContextMenu, cMouseOver, cMouseDown, cMouseUp, cMouseMove, cMouseOut, cMouseUpTo, cMouseMoveTo, sClickOn, sHoverOn, sContextMenuOn, cClickOn, trueClick, trueClickOn, cTrueClick, sTrueClickOn, leftClickButton, middleClickButton, rightClickButton, leftClickButtons, rightClickButtons, middleClickButtons, click, mouseOver, mouseDown, mouseUp, mouseUpTo, mouseMove, mouseMoveTo, mouseOut, clickOn, contextMenuOn, hoverOn, point, event };
//# sourceMappingURL=Mouse.js.map