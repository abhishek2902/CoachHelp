import { SugarElement } from '@ephox/sugar';
import * as ApproxComparisons from '../assertions/ApproxComparisons';
import * as ApproxStructures from '../assertions/ApproxStructures';
type StructAssert = ApproxStructures.StructAssert;
type StructAssertBasic = ApproxStructures.StructAssertBasic;
type StructAssertAdv = ApproxStructures.StructAssertAdv;
export type ArrayApi = typeof arrApi;
export type StringApi = typeof strApi;
export type StructApi = typeof structApi;
export type Builder<T> = (struct: StructApi, str: StringApi, arr: ArrayApi) => T;
declare const structApi: {
    element: (tag: string, fields: ApproxStructures.ElementFields) => ApproxStructures.StructAssert;
    text: (s: ApproxStructures.StringAssert, combineSiblings?: boolean) => ApproxStructures.StructAssert;
    anything: () => ApproxStructures.StructAssertBasic;
    either: (structAsserts: ApproxStructures.StructAssert[]) => ApproxStructures.StructAssert;
    repeat: (min: number, max?: number | true) => (structAssert: ApproxStructures.StructAssert) => ApproxStructures.StructAssert;
    zeroOrOne: (structAssert: ApproxStructures.StructAssert) => ApproxStructures.StructAssert;
    zeroOrMore: (structAssert: ApproxStructures.StructAssert) => ApproxStructures.StructAssert;
    oneOrMore: (structAssert: ApproxStructures.StructAssert) => ApproxStructures.StructAssert;
    theRest: () => ApproxStructures.StructAssert;
};
declare const strApi: {
    is: (target: string) => ApproxComparisons.CombinedAssert;
    startsWith: (target: string) => ApproxComparisons.CombinedAssert;
    contains: (target: string) => ApproxComparisons.CombinedAssert;
    none: (message?: string) => ApproxComparisons.CombinedAssert;
    measurement: (amount: number, unit: string, margin: number) => ApproxComparisons.CombinedAssert;
};
declare const arrApi: {
    not: <T>(target: T) => ApproxComparisons.CombinedAssert;
    has: <T_1>(target: T_1) => ApproxComparisons.CombinedAssert;
    hasPrefix: (prefix: string) => ApproxComparisons.CombinedAssert;
};
declare const build: <T>(f: Builder<T>) => T;
declare const fromElement: (node: SugarElement<Node>) => StructAssert;
declare const fromHtml: (html: string) => StructAssertBasic | StructAssertAdv;
export { build, fromHtml, fromElement };
//# sourceMappingURL=ApproxStructure.d.ts.map