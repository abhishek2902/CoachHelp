import { SugarElement } from '@ephox/sugar';
import * as fc from 'fast-check';
import * as ArbChildrenSchema from './ArbChildrenSchema';
import * as WeightedChoice from './WeightedChoice';
interface Decorations {
    readonly attributes?: Record<string, string | boolean | number>;
    readonly styles?: Record<string, string>;
}
interface ArbDecorations {
    readonly attributes?: fc.Arbitrary<Record<string, string | boolean | number>>;
    readonly styles?: fc.Arbitrary<Record<string, string>>;
}
export interface TagDetail extends ArbDecorations {
    readonly tag: string;
}
export interface TagsDetail extends ArbDecorations {
    readonly tags: Record<string, WeightedChoice.WeightedItem & Decorations>;
}
export type CompositeDetail = (TagDetail | TagsDetail) & ArbChildrenSchema.CompositeDetail & {
    readonly type: 'composite';
};
export interface StructureDetail extends TagDetail, ArbChildrenSchema.StructureDetail {
    readonly type: 'structure';
}
export interface LeafDetail extends TagDetail {
    readonly type: 'leaf';
}
export interface ArbitraryDetail<T> {
    readonly type: 'arbitrary';
    readonly component: fc.Arbitrary<T>;
}
export type SchemaDetail = ArbitraryDetail<any> | CompositeDetail | LeafDetail | StructureDetail;
export interface Schema {
    readonly arbitrary: <T extends Node>(arb: ArbitraryDetail<T>) => (rawDepth: number | undefined) => fc.Arbitrary<SugarElement<T>>;
    readonly leaf: (detail: LeafDetail) => (rawDepth: number | undefined) => fc.Arbitrary<SugarElement<HTMLElement>>;
    readonly structure: (detail: StructureDetail) => (rawDepth: number | undefined) => fc.Arbitrary<SugarElement<HTMLElement>>;
    readonly composite: (detail: CompositeDetail) => (rawDepth: number | undefined) => fc.Arbitrary<SugarElement<HTMLElement>>;
}
export declare const create: (construct: ArbChildrenSchema.Construct<SugarElement<Node>>) => Schema;
export {};
//# sourceMappingURL=ArbSchemaTypes.d.ts.map