import { Assert } from '@ephox/bedrock-client';
import { Optional } from '@ephox/katamari';
import { Chain } from './Chain';
import { Step } from './Step';
export const TestStore = () => {
    let array = [];
    const add = (value) => {
        array.push(value);
    };
    const adder = (value) => () => add(value);
    // Used for keyboard handlers which need to return Optional to know whether or not to kill the event
    const adderH = (value) => () => {
        add(value);
        return Optional.some(true);
    };
    const sClear = Step.sync(() => {
        array = [];
    });
    const clear = () => {
        array = [];
    };
    const cClear = Chain.op(() => {
        clear();
    });
    const sAssertEq = (label, expected) => Step.sync(() => Assert.eq(label, expected, array.slice(0)));
    const cAssertEq = (label, expected) => Chain.op(() => {
        assertEq(label, expected);
    });
    const assertEq = (label, expected) => Assert.eq(label, expected, array.slice(0));
    const assertSortedEq = (label, expected, cmp) => Assert.eq(label, expected.slice(0).sort(cmp), array.slice(0).sort(cmp));
    const sAssertSortedEq = (label, expected, cmp) => Step.sync(() => assertSortedEq(label, expected, cmp));
    return {
        add,
        adder,
        adderH,
        clear,
        sClear,
        cClear,
        sAssertEq,
        cAssertEq,
        assertEq,
        assertSortedEq,
        sAssertSortedEq
    };
};
//# sourceMappingURL=TestStore.js.map