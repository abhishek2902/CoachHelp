import { Fun, Merger } from '@ephox/katamari';
import { PredicateFilter, SugarNode, SugarText, Traverse } from '@ephox/sugar';
import * as fc from 'fast-check';
const defaultExclusions = {
    containers: Fun.never
    /* Maybe support offsets later if it makes sense to do so */
};
const getEnd = (target) => 
// Probably do this more efficiently
SugarNode.isText(target) ? SugarText.get(target).length : Traverse.children(target).length;
const gChooseIn = (target) => {
    const offsets = getEnd(target);
    return fc.integer({ min: 0, max: offsets }).map((offset) => ({ element: target, offset }));
};
const gChooseFrom = (root, exclusions) => {
    const self = exclusions.containers(root) ? [] : [root];
    const everything = PredicateFilter.descendants(root, Fun.not(exclusions.containers)).concat(self);
    return fc.constantFrom(...(everything.length > 0 ? everything : [root])).chain(gChooseIn);
};
const selection = (root, rawExclusions) => {
    const exclusions = Merger.deepMerge(defaultExclusions, rawExclusions);
    return gChooseFrom(root, exclusions).chain((start) => gChooseFrom(root, exclusions).map((finish) => ({
        start: start.element,
        soffset: start.offset,
        finish: finish.element,
        foffset: finish.offset
    })));
};
export { selection };
//# sourceMappingURL=GenSelection.js.map