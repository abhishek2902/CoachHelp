import { Arr, Optional } from '@ephox/katamari';
import { SugarElement, SugarNode, Traverse } from '@ephox/sugar';
import * as Sizzle from 'sizzle';
const toOptionEl = (output) => output.length === 0 ? Optional.none() : Optional.from(output[0]).map(SugarElement.fromDom);
/* Petrie makes extensive use of :visible, :has() and :contains() which are sizzle extensions */
const descendant = (sugarElement, selector) => {
    const siz = Sizzle(selector, sugarElement.dom);
    return toOptionEl(siz);
};
const toArrayEl = (elements) => Arr.map(elements, SugarElement.fromDom);
/* Petrie makes extensive use of :visible, :has() and :contains() which are sizzle extensions */
const descendants = (sugarElement, selector) => toArrayEl(Sizzle(selector, sugarElement.dom));
const matches = (sugarElement, selector) => SugarNode.isElement(sugarElement) && Sizzle.matchesSelector(sugarElement.dom, selector);
const child = (sugarElement, selector) => {
    const children = Traverse.children(sugarElement);
    return Arr.find(children, (child) => matches(child, selector));
};
const children = (sugarElement, selector) => {
    const children = Traverse.children(sugarElement);
    return Arr.filter(children, (child) => matches(child, selector));
};
export { descendant, descendants, matches, child, children };
//# sourceMappingURL=SizzleFind.js.map