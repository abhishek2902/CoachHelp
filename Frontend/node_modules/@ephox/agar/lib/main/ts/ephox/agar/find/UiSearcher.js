import { TestLabel } from '@ephox/bedrock-client';
import { Adt, Optional, Result } from '@ephox/katamari';
import { Truncate } from '@ephox/sugar';
import * as SizzleFind from '../alien/SizzleFind';
const targets = Adt.generate([
    { self: ['element', 'selector'] },
    { children: ['element', 'selector'] },
    { descendants: ['element', 'selector'] }
]);
const derive = (element, selector) => {
    // Not sure if error is what I want here.
    if (selector === undefined) {
        throw new Error('No selector passed through');
    }
    else if (selector.indexOf('root:') === 0) {
        return targets.self(element, selector.substring('root:'.length));
    }
    else if (selector.indexOf('root>') === 0) {
        return targets.children(element, selector.substring('root>'.length));
    }
    else {
        return targets.descendants(element, selector);
    }
};
const matchesSelf = (element, selector) => SizzleFind.matches(element, selector) ? Optional.some(element) : Optional.none();
const select = (element, selector) => derive(element, selector).fold(matchesSelf, SizzleFind.child, SizzleFind.descendant);
const selectAll = (element, selector) => derive(element, selector).fold((element, selector) => matchesSelf(element, selector).toArray(), SizzleFind.children, SizzleFind.descendants);
const toResult = (message, option) => option.fold(() => Result.error(TestLabel.asString(message)), Result.value);
const findIn = (container, selector) => toResult(() => 'Could not find selector: ' + selector + ' in ' + Truncate.getHtml(container), select(container, selector));
const findAllIn = (container, selector) => selectAll(container, selector);
export { select, findIn, findAllIn };
//# sourceMappingURL=UiSearcher.js.map