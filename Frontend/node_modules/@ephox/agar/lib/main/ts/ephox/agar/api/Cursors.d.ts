import { Result } from '@ephox/katamari';
import { SugarElement } from '@ephox/sugar';
import { Chain } from './Chain';
export interface CursorRange {
    readonly start: SugarElement<Node>;
    readonly soffset: number;
    readonly finish: SugarElement<Node>;
    readonly foffset: number;
}
export interface CursorPath {
    readonly startPath: number[];
    readonly soffset: number;
    readonly finishPath: number[];
    readonly foffset: number;
}
declare const range: (obj: {
    start: SugarElement<Node>;
    soffset: number;
    finish: SugarElement<Node>;
    foffset: number;
}) => CursorRange;
declare const path: (obj: {
    startPath: number[];
    soffset: number;
    finishPath: number[];
    foffset: number;
}) => CursorPath;
export interface CursorSpec {
    readonly element: number[];
    readonly offset: number;
}
export interface RangeSpec {
    readonly start: CursorSpec;
    readonly finish?: CursorSpec;
}
declare const pathFrom: (spec: CursorSpec | RangeSpec) => CursorPath;
declare const follow: (container: SugarElement<Node>, calcPath: number[]) => Result<SugarElement<Node>, string>;
declare const followPath: (container: SugarElement<Node>, calcPath: CursorPath) => Result<CursorRange, string>;
declare const cFollowPath: (calcPath: CursorPath) => Chain<SugarElement<Node>, CursorRange>;
declare const cFollowCursor: (elementPath: number[], offset: number) => Chain<SugarElement<Node>, CursorRange>;
declare const cFollow: (elementPath: number[]) => Chain<SugarElement<Node>, SugarElement<Node>>;
declare const cToRange: Chain<{
    start: SugarElement<Node>;
    soffset: number;
    finish: SugarElement<Node>;
    foffset: number;
}, CursorRange>;
declare const cToPath: Chain<{
    startPath: number[];
    soffset: number;
    finishPath: number[];
    foffset: number;
}, CursorPath>;
declare const calculate: (container: SugarElement<Node>, calcPath: CursorPath) => CursorRange;
declare const calculateOne: (container: SugarElement<Node>, calcPath: number[]) => SugarElement<Node>;
export { range, path, pathFrom, follow, followPath, cFollow, cFollowPath, cFollowCursor, cToRange, cToPath, calculate, calculateOne };
//# sourceMappingURL=Cursors.d.ts.map