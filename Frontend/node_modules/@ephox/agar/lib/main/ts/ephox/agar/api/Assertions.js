import { Assert, TestLabel } from '@ephox/bedrock-client';
import { Obj, Optional } from '@ephox/katamari';
import { Compare, SugarElement, Truncate } from '@ephox/sugar';
import { elementQueue } from '../assertions/ApproxStructures';
import * as Differ from '../assertions/Differ';
import * as ApproxStructure from './ApproxStructure';
import { Chain } from './Chain';
import * as Logger from './Logger';
import { Step } from './Step';
import * as UiFinder from './UiFinder';
const toStep = (method) => (...args) => Step.sync(() => {
    method.apply(undefined, args);
});
const toChain = (method) => (label, expected) => Chain.op((actual) => {
    method.call(undefined, label, expected, actual);
});
const textError = (label, expected, actual) => {
    const err = new Error(label);
    err.diff = {
        expected,
        actual,
        comparison: Differ.htmlDiff(expected, actual)
    };
    err.label = label;
    err.name = 'HtmlAssertion';
    return err;
};
const assertHtml = (label, expected, actual) => {
    if (expected !== actual) {
        throw textError(TestLabel.asString(label), expected, actual);
    }
};
const assertStructure = (label, expected, container) => {
    Logger.sync(label, () => {
        if (expected.type === 'advanced') {
            expected.doAssert(elementQueue([container], Optional.none()));
        }
        else {
            expected.doAssert(container);
        }
    });
};
const assertHtmlStructure = (label, expected, actual) => {
    assertStructure(label, ApproxStructure.fromHtml(expected), SugarElement.fromHtml(actual));
};
const assertHtmlStructure2 = (label, expected, actual) => {
    assertStructure(label, ApproxStructure.fromHtml(expected), actual);
};
const assertPresence = (label, expected, container) => {
    Obj.each(expected, (num, selector) => {
        const actual = UiFinder.findAllIn(container, selector).length;
        Assert.eq(TestLabel.concat('Did not find ' + num + ' of ' + selector + ', found: ' + actual + '. Test: ', label), num, actual);
    });
};
const assertEq = Assert.eq;
const assertDomEq = (label, expected, actual) => {
    Assert.eq(TestLabel.concat(label, () => '\nExpected : ' + Truncate.getHtml(expected) + '\nActual: ' + Truncate.getHtml(actual)), true, Compare.eq(expected, actual));
};
const sAssertEq = toStep(Assert.eq);
const sAssertHtml = toStep(assertHtml);
const sAssertPresence = toStep(assertPresence);
const sAssertStructure = toStep(assertStructure);
const cAssertEq = toChain(Assert.eq);
const cAssertDomEq = toChain(assertDomEq);
const cAssertHtml = toChain(assertHtml);
const cAssertPresence = toChain(assertPresence);
const cAssertHtmlStructure = toChain(assertHtmlStructure2);
const cAssertStructure = toChain(assertStructure);
export { assertEq, assertDomEq, assertHtml, assertPresence, assertHtmlStructure, assertStructure, sAssertEq, sAssertHtml, sAssertPresence, sAssertStructure, cAssertEq, cAssertDomEq, cAssertHtml, cAssertPresence, cAssertHtmlStructure, cAssertStructure };
//# sourceMappingURL=Assertions.js.map