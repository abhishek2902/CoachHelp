import { SugarElement } from '@ephox/sugar';
import { Chain } from './Chain';
import { Step } from './Step';
export interface PasteUrlItem {
    readonly kind: 'string' | 'file';
    readonly url: string;
}
declare const pasteDataTransfer: (target: SugarElement<Element>, mutator: (dataTransfer: DataTransfer) => void) => void;
declare const pasteItems: (target: SugarElement<Element>, items: Record<string, string>) => void;
declare const pasteFiles: (target: SugarElement<Element>, files: File[]) => void;
declare const cPasteDataTransfer: <T extends Element>(mutator: (dataTransfer: DataTransfer) => void) => Chain<SugarElement<T>, SugarElement<T>>;
declare const cPasteItems: <T extends Element>(items: Record<string, string>) => Chain<SugarElement<T>, SugarElement<T>>;
declare const cPasteFiles: <T extends Element>(files: File[]) => Chain<SugarElement<T>, SugarElement<T>>;
declare const sPasteDataTransfer: <T>(mutator: (dataTransfer: DataTransfer) => void, selector: string) => Step<T, T>;
declare const sPasteItems: <T>(items: Record<string, string>, selector: string) => Step<T, T>;
declare const sPasteFiles: <T>(files: File[], selector: string) => Step<T, T>;
declare const pPasteUrlItems: (target: SugarElement<Element>, items: PasteUrlItem[]) => Promise<void>;
declare const cut: (target: SugarElement<Element>) => DataTransfer;
declare const copy: (target: SugarElement<Element>) => DataTransfer;
declare const cCut: Chain<SugarElement<Element>, DataTransfer>;
declare const cCopy: Chain<SugarElement<Element>, DataTransfer>;
export { pasteDataTransfer, pasteItems, pasteFiles, cPasteDataTransfer, cPasteItems, cPasteFiles, sPasteDataTransfer, sPasteItems, sPasteFiles, pPasteUrlItems, cut, copy, cCut, cCopy };
//# sourceMappingURL=Clipboard.d.ts.map