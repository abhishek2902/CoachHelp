import { Keyboard, Mouse } from '@ephox/agar';
import * as TypeText from '../../keyboard/TypeText';
import { TinyDom } from '../TinyDom';
const keydown = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeydown(TinyDom.document(editor), keyvalue, modifiers);
const keyup = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeyup(TinyDom.document(editor), keyvalue, modifiers);
const keypress = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeypress(TinyDom.document(editor), keyvalue, modifiers);
const keystroke = (editor, keyvalue, modifiers = {}) => Keyboard.activeKeystroke(TinyDom.document(editor), keyvalue, modifiers);
const type = (editor, content) => TypeText.typeContentAtSelection(TinyDom.document(editor), content);
const trueClick = (editor) => Mouse.trueClick(TinyDom.body(editor));
const trueClickOn = (editor, selector) => Mouse.trueClickOn(TinyDom.body(editor), selector);
const pWaitForEventToStopFiring = (editor, eventName, timing) => new Promise((resolve, reject) => {
    const startTime = Date.now();
    let timer;
    const onEditorEvent = () => {
        const currentTime = Date.now();
        if (currentTime - startTime > timing.timeout) {
            editor.off(eventName, onEditorEvent);
            reject(`It took too long (${currentTime - startTime} ms) to stop receiving ${eventName} events. Max timeout was: ${timing.timeout} ms.`);
        }
        else {
            if (timer !== undefined) {
                clearTimeout(timer);
            }
            timer = setTimeout(() => {
                editor.off(eventName, onEditorEvent);
                resolve();
            }, timing.delay);
        }
    };
    editor.on(eventName, onEditorEvent);
    onEditorEvent();
});
export { keydown, keypress, keystroke, keyup, type, trueClick, trueClickOn, pWaitForEventToStopFiring };
//# sourceMappingURL=TinyContentActions.js.map