import { TestLogs } from '@ephox/agar';
import { Optional } from '@ephox/katamari';
import { Insert, Remove, SugarBody, SugarElement, SugarShadowDom } from '@ephox/sugar';
import * as Loader from '../../loader/Loader';
import { setupTinymceBaseUrl } from '../../loader/Urls';
const setupLight = (callback, settings, success, failure) => {
    const nuSettings = {
        toolbar: '',
        menubar: false,
        statusbar: false,
        ...settings
    };
    Loader.setup({
        preInit: setupTinymceBaseUrl,
        run: callback,
        success,
        failure
    }, nuSettings, Optional.none());
};
const setup = (callback, settings, success, failure) => {
    Loader.setup({
        preInit: setupTinymceBaseUrl,
        run: callback,
        success,
        failure
    }, settings, Optional.none());
};
const setupFromElement = (callback, settings, element, success, failure) => {
    Loader.setup({
        preInit: setupTinymceBaseUrl,
        run: callback,
        success,
        failure
    }, settings, Optional.some(element));
};
const setupInShadowRoot = (callback, settings, success, failure) => {
    if (!SugarShadowDom.isSupported()) {
        return success();
    }
    const shadowHost = SugarElement.fromTag('div', document);
    Insert.append(SugarBody.body(), shadowHost);
    const sr = SugarElement.fromDom(shadowHost.dom.attachShadow({ mode: 'open' }));
    const editorDiv = SugarElement.fromTag('div', document);
    Insert.append(sr, editorDiv);
    setupFromElement((editor, success, failure) => callback(editor, sr, success, failure), settings, editorDiv, (v, logs) => {
        Remove.remove(shadowHost);
        success(v, logs);
    }, failure);
};
/** Runs the callback with an editor in the body, and then with an editor in a shadow root. Lets you test both scenarios. */
const setupInBodyAndShadowRoot = (callback, settings, success, failure) => {
    setup(callback, settings, (v, logs1) => {
        if (SugarShadowDom.isSupported()) {
            setupInShadowRoot((e, _sr, s, f) => callback(e, s, f), settings, (v2, logs2) => {
                const logs = TestLogs.concat(TestLogs.getOrInit(logs1), TestLogs.getOrInit(logs2));
                success(v2, logs);
            }, failure);
        }
        else {
            success(v, logs1);
        }
    }, failure);
};
export { setup, setupLight, setupFromElement, setupInShadowRoot, setupInBodyAndShadowRoot };
//# sourceMappingURL=TinyLoader.js.map