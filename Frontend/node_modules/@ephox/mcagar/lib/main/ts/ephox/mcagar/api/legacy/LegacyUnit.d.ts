import { Step } from '@ephox/agar';
import { Editor } from '../../alien/EditorTypes';
type SyncTestCallback<T> = (initValue: T) => void;
type AsyncTestCallback<T> = (initValue: T, done: () => void, die: (err?: any) => void) => void;
type Offset = 'after' | 'afterNextCharacter' | number;
interface Suite<T> {
    readonly test: (message: string, fn: SyncTestCallback<T>) => void;
    readonly asyncTest: (message: string, fn: AsyncTestCallback<T>) => void;
    readonly toSteps: (initValue: T) => Step<any, any>[];
}
declare const test: <T>(message: string, fn: SyncTestCallback<T>) => (initValue: T) => Step<T, T>;
declare const asyncTest: <T>(message: string, fn: AsyncTestCallback<T>) => (initValue: T) => Step<T, T>;
declare const createSuite: <T = any>() => Suite<T>;
declare const execCommand: <T extends Editor = Editor>(editor: T, cmd: string, ui?: boolean, value?: any) => void;
declare const setSelection: <T extends Editor = Editor>(editor: T, startSelector: string | Node, startOffset: Offset, endSelector?: string, endOffset?: Offset) => void;
declare const trimBrs: (html: string) => string;
declare const equalDom: <T extends Node>(actual: T, expected: T, message?: string) => void;
declare const equal: <T>(actual: T, expected: T, message?: string) => void;
declare const strictEqual: <T>(actual: T, expected: T, message?: string) => void;
declare const deepEqual: <T>(actual: T, expected: T, message?: string) => void;
export { test, asyncTest, createSuite, execCommand, setSelection, trimBrs, equal, equalDom, strictEqual, deepEqual };
//# sourceMappingURL=LegacyUnit.d.ts.map