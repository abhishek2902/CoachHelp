import { Chain, Step } from '@ephox/agar';
import { SugarElement } from '@ephox/sugar';
import { Editor } from '../../alien/EditorTypes';
export interface TinyUi {
    clickOnToolbar: (elector: string) => void;
    clickOnMenu: (selector: string) => void;
    clickOnUi: (selector: string) => void;
    submitDialog: (selector: string) => void;
    pWaitForUi: (selector: string) => Promise<SugarElement<Element>>;
    pWaitForPopup: (selector: string) => Promise<SugarElement<HTMLElement>>;
    sClickOnToolbar: <T>(label: string, selector: string) => Step<T, T>;
    sClickOnMenu: <T>(label: string, selector: string) => Step<T, T>;
    sClickOnUi: <T>(label: string, selector: string) => Step<T, T>;
    sWaitForUi: <T>(label: string, selector: string) => Step<T, T>;
    sWaitForPopup: <T>(label: string, selector: string) => Step<T, T>;
    sFillDialogWith: <T>(data: Record<string, any>, selector: string) => Step<T, T>;
    sSubmitDialog: <T>(selector: string) => Step<T, T>;
    cWaitForPopup: <T>(label: string, selector: string) => Chain<T, SugarElement<HTMLElement>>;
    cWaitForUi: <T>(label: string, selector: string) => Chain<T, SugarElement<Element>>;
    cWaitForState: <T, U extends Element>(hasState: (element: SugarElement<U>) => boolean) => (label: string, selector: string) => Chain<T, SugarElement<U>>;
    cFillDialogWith: <T extends Element>(data: Record<string, any>) => Chain<SugarElement<T>, SugarElement<T>>;
    cSubmitDialog: <T extends Element>() => Chain<SugarElement<T>, SugarElement<T>>;
    cAssertDialogContents: <T extends Element>(data: Record<string, any>) => Chain<SugarElement<T>, SugarElement<T>>;
    cTriggerContextMenu: (label: string, target: string, menu: string) => Chain<unknown, SugarElement<HTMLElement>>;
}
export declare const TinyUi: (editor: Editor) => TinyUi;
//# sourceMappingURL=TinyUi.d.ts.map