import { TestLogs } from '@ephox/agar';
import { Arr, FutureResult, Optional } from '@ephox/katamari';
import * as Loader from '../../loader/Loader';
import { setTinymceBaseUrl } from '../../loader/Urls';
const setupBaseUrl = (tinymce, settings) => {
    if (settings.base_url) {
        setTinymceBaseUrl(tinymce, settings.base_url);
    }
};
const loadScripts = (urls, success, failure) => {
    const result = Arr.foldl(urls, (acc, url) => acc.bindFuture(() => Loader.loadScript(url)), FutureResult.pure(''));
    result.get((res) => {
        res.fold((e) => failure(e, TestLogs.init()), success);
    });
};
const setup = (callback, urls, settings, success, failure) => {
    loadScripts(urls, () => {
        Loader.setup({
            preInit: setupBaseUrl,
            run: callback,
            success,
            failure
        }, settings, Optional.none());
    }, failure);
};
const setupFromElement = (callback, urls, settings, element, success, failure) => {
    loadScripts(urls, () => {
        Loader.setup({
            preInit: setupBaseUrl,
            run: callback,
            success,
            failure
        }, settings, Optional.some(element));
    }, failure);
};
export { setup, setupFromElement };
//# sourceMappingURL=RemoteTinyLoader.js.map