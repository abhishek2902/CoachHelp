import { Assertions, Cursors } from '@ephox/agar';
import { Optional } from '@ephox/katamari';
import { Hierarchy, Html, SugarElement } from '@ephox/sugar';
import { TinyDom } from '../TinyDom';
const assertPath = (label, root, expPath, expOffset, actElement, actOffset) => {
    const expected = Cursors.calculateOne(root, expPath);
    const message = () => {
        const actual = SugarElement.fromDom(actElement);
        const actPath = Hierarchy.path(root, actual).getOrDie('could not find path to root');
        return 'Expected path: ' + JSON.stringify(expPath) + '.\nActual path: ' + JSON.stringify(actPath);
    };
    Assertions.assertEq(() => 'Assert incorrect for ' + label + '.\n' + message(), true, expected.dom === actElement);
    Assertions.assertEq(() => 'Offset mismatch for ' + label + ' in :\n' + Html.getOuter(expected), expOffset, actOffset);
};
const assertContent = (editor, expected, args) => {
    const content = editor.getContent(args);
    Assertions.assertHtml('Checking TinyMCE content', expected, content);
};
const assertRawContent = (editor, expected) => {
    const content = editor.getBody().innerHTML;
    Assertions.assertHtml('Checking TinyMCE raw content', expected, content);
};
const assertContentPresence = (editor, expected) => {
    Assertions.assertPresence(() => 'Asserting the presence of selectors inside TinyMCE content. Complete list: ' + JSON.stringify(expected) + '\n', expected, TinyDom.body(editor));
};
const assertContentStructure = (editor, expected) => {
    Assertions.assertStructure('Asserting the structure of TinyMCE content.', expected, TinyDom.body(editor));
};
const assertSelection = (editor, startPath, soffset, finishPath, foffset) => {
    const actual = Optional.from(editor.selection.getRng()).getOrDie('Failed to get range');
    const body = TinyDom.body(editor);
    assertPath('start', body, startPath, soffset, actual.startContainer, actual.startOffset);
    assertPath('finish', body, finishPath, foffset, actual.endContainer, actual.endOffset);
};
const assertCursor = (editor, path, offset) => assertSelection(editor, path, offset, path, offset);
export { assertContent, assertRawContent, assertContentPresence, assertContentStructure, assertCursor, assertSelection };
//# sourceMappingURL=TinyAssertions.js.map