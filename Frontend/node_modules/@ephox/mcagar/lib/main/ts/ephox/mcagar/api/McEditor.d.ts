import { Chain } from '@ephox/agar';
import { SugarElement } from '@ephox/sugar';
import { Editor as EditorType } from '../alien/EditorTypes';
declare const errorMessageEditorRemoved = "Editor Removed";
declare const pFromElement: <T extends EditorType = EditorType>(element: SugarElement<Element>, settings: Record<string, any>) => Promise<T>;
declare const pFromHtml: <T extends EditorType = EditorType>(html: string | null | undefined, settings: Record<string, any>) => Promise<T>;
declare const pFromSettings: <T extends EditorType = EditorType>(settings: Record<string, any>) => Promise<T>;
declare const cFromElement: <T extends EditorType = EditorType>(element: SugarElement<Element>, settings: Record<string, any>) => Chain<unknown, T>;
declare const cFromHtml: <T extends EditorType = EditorType>(html: string | null, settings: Record<string, any>) => Chain<any, T>;
declare const cFromSettings: <T extends EditorType = EditorType>(settings: Record<string, any>) => Chain<any, T>;
declare const remove: (editor: EditorType) => void;
declare const cRemove: Chain<EditorType, EditorType>;
declare const cCreate: Chain<any, EditorType>;
declare const cCreateInline: Chain<any, EditorType>;
declare const pCreate: <T extends EditorType = EditorType>() => Promise<T>;
declare const pCreateInline: <T extends EditorType = EditorType>() => Promise<T>;
export { errorMessageEditorRemoved, cFromHtml, cFromElement, cFromSettings, cCreate, cCreateInline, cRemove, pFromElement, pFromHtml, pFromSettings, pCreate, pCreateInline, remove };
//# sourceMappingURL=McEditor.d.ts.map