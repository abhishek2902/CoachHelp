import { Cursors, UiFinder } from '@ephox/agar';
import { createDomSelection } from '../../selection/SelectionTools';
import { TinyDom } from '../TinyDom';
const setRawSelection = (editor, startPath, soffset, finishPath, foffset) => {
    const rng = createDomSelection(TinyDom.body(editor), startPath, soffset, finishPath, foffset);
    const sel = editor.selection.getSel();
    if (sel) {
        sel.removeAllRanges();
        sel.addRange(rng);
    }
};
const setSelection = (editor, startPath, soffset, finishPath, foffset, fireNodeChange = true) => {
    const rng = createDomSelection(TinyDom.body(editor), startPath, soffset, finishPath, foffset);
    editor.selection.setRng(rng);
    if (fireNodeChange) {
        editor.nodeChanged();
    }
};
const setSelectionFrom = (editor, spec, fireNodeChange = true) => {
    const path = Cursors.pathFrom(spec);
    setSelection(editor, path.startPath, path.soffset, path.finishPath, path.foffset, fireNodeChange);
};
const setCursor = (editor, elementPath, offset, fireNodeChange = true) => {
    setSelection(editor, elementPath, offset, elementPath, offset, fireNodeChange);
};
const select = (editor, selector, path) => {
    const container = UiFinder.findIn(TinyDom.body(editor), selector).getOrDie();
    const target = Cursors.calculateOne(container, path);
    editor.selection.select(target.dom);
};
export { select, setCursor, setSelection, setRawSelection, setSelectionFrom };
//# sourceMappingURL=TinySelections.js.map