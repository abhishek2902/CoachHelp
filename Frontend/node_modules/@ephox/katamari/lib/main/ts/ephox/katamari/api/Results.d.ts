import { Result } from './Result';
interface ComparisonAdt<A, B> {
    readonly fold: <T>(bothErrors: (error1: B, error2: B) => T, firstError: (error1: B, value2: A) => T, secondError: (value1: A, error2: B) => T, bothValues: (value1: A, value2: A) => T) => T;
    readonly match: <T>(branches: {
        bothErrors: (error1: B, error2: B) => T;
        firstError: (error1: B, value2: A) => T;
        secondError: (value1: A, error2: B) => T;
        bothValues: (value1: A, value2: A) => T;
    }) => T;
    readonly log: (label: string) => void;
}
/** partition :: [Result a] -> { errors: [String], values: [a] } */
export declare const partition: <T, E>(results: Result<T, E>[]) => {
    values: T[];
    errors: E[];
};
export declare const compare: <A, B>(result1: Result<A, B>, result2: Result<A, B>) => ComparisonAdt<A, B>;
export declare const unite: <T>(result: Result<T, T>) => T;
export declare const is: <A, B>(result: Result<A, B>, value: A) => boolean;
export {};
//# sourceMappingURL=Results.d.ts.map