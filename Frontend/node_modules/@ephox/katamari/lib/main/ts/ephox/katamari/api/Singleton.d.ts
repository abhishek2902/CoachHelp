import { Optional } from './Optional';
interface Singleton<T> {
    readonly clear: () => void;
    readonly isSet: () => boolean;
    readonly get: () => Optional<T>;
    readonly set: (value: T) => void;
}
export interface Repeatable {
    readonly clear: () => void;
    readonly isSet: () => boolean;
    readonly get: () => Optional<number>;
    readonly set: (functionToRepeat: () => void) => void;
}
export interface Revocable<T> extends Singleton<T> {
}
export interface Api<T> extends Singleton<T> {
    readonly run: (fn: (data: T) => void) => void;
}
export interface Value<T> extends Singleton<T> {
    readonly on: (fn: (data: T) => void) => void;
}
export declare const repeatable: (delay: number) => Repeatable;
export declare const destroyable: <T extends {
    destroy: () => void;
}>() => Revocable<T>;
export declare const unbindable: <T extends {
    unbind: () => void;
}>() => Revocable<T>;
export declare const api: <T extends {
    destroy: () => void;
}>() => Api<T>;
export declare const value: <T>() => Value<T>;
export {};
//# sourceMappingURL=Singleton.d.ts.map