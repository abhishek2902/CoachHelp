/** path :: ([String], JsObj?) -> JsObj */
export declare const path: <T>(parts: string[], scope?: {}) => T | undefined;
/** resolve :: (String, JsObj?) -> JsObj */
export declare const resolve: <T>(p: string, scope?: {}) => T | undefined;
/** step :: (JsObj, String) -> JsObj */
export declare const step: <T extends {}, K extends keyof T>(o: T, part: K) => T[K];
/** forge :: ([String], JsObj?) -> JsObj */
export declare const forge: <T extends string[]>(parts: T, target?: {}) => { [K in T[number]]: {}; };
/** namespace :: (String, JsObj?) -> JsObj */
export declare const namespace: (name: string, target?: {}) => {
    [key: string]: {};
};
//# sourceMappingURL=Resolve.d.ts.map