import * as Arr from './Arr';
import { Optional } from './Optional';
const nu = (baseFn) => {
    let data = Optional.none();
    let callbacks = [];
    /** map :: this LazyValue a -> (a -> b) -> LazyValue b */
    const map = (f) => nu((nCallback) => {
        get((data) => {
            nCallback(f(data));
        });
    });
    const get = (nCallback) => {
        if (isReady()) {
            call(nCallback);
        }
        else {
            callbacks.push(nCallback);
        }
    };
    const set = (x) => {
        if (!isReady()) {
            data = Optional.some(x);
            run(callbacks);
            callbacks = [];
        }
    };
    const isReady = () => data.isSome();
    const run = (cbs) => {
        Arr.each(cbs, call);
    };
    const call = (cb) => {
        data.each((x) => {
            setTimeout(() => {
                cb(x);
            }, 0);
        });
    };
    // Lazy values cache the value and kick off immediately
    baseFn(set);
    return {
        get,
        map,
        isReady
    };
};
const pure = (a) => nu((callback) => {
    callback(a);
});
export const LazyValue = {
    nu,
    pure
};
//# sourceMappingURL=LazyValue.js.map