import { LazyValue } from './LazyValue';
export interface Future<T> {
    readonly map: <U>(mapper: (v: T) => U) => Future<U>;
    readonly bind: <U>(binder: (v: T) => Future<U>) => Future<U>;
    readonly anonBind: <U>(thunk: Future<U>) => Future<U>;
    readonly toLazy: () => LazyValue<T>;
    readonly toCached: () => Future<T>;
    readonly toPromise: () => Promise<T>;
    readonly get: (callback: (v: T) => void) => void;
}
export declare const Future: {
    nu: {
        <T = any>(baseFn: (completer: (value: T) => void) => void): Future<T>;
        (baseFn: (completer: () => void) => void): Future<void>;
    };
    pure: <T_1>(a: T_1) => Future<T_1>;
};
//# sourceMappingURL=Future.d.ts.map