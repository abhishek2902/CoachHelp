import * as BagUtils from '../util/BagUtils';
import * as Arr from './Arr';
import * as Fun from './Fun';
import * as Obj from './Obj';
import * as Type from './Type';
// Ensure that the object has all required fields. They must be functions.
const base = (handleUnsupported, required) => {
    return baseWith(handleUnsupported, required, {
        validate: Type.isFunction,
        label: 'function'
    });
};
// Ensure that the object has all required fields. They must satisy predicates.
const baseWith = (handleUnsupported, required, pred) => {
    if (required.length === 0) {
        throw new Error('You must specify at least one required field.');
    }
    BagUtils.validateStrArr('required', required);
    BagUtils.checkDupes(required);
    return (obj) => {
        const keys = Obj.keys(obj);
        // Ensure all required keys are present.
        const allReqd = Arr.forall(required, (req) => {
            return Arr.contains(keys, req);
        });
        if (!allReqd) {
            BagUtils.reqMessage(required, keys);
        }
        handleUnsupported(required, keys);
        const invalidKeys = Arr.filter(required, (key) => {
            return !pred.validate(obj[key], key);
        });
        if (invalidKeys.length > 0) {
            BagUtils.invalidTypeMessage(invalidKeys, pred.label);
        }
        return obj;
    };
};
const handleExact = (required, keys) => {
    const unsupported = Arr.filter(keys, (key) => {
        return !Arr.contains(required, key);
    });
    if (unsupported.length > 0) {
        BagUtils.unsuppMessage(unsupported);
    }
};
const allowExtra = Fun.noop;
export const exactly = (required) => base(handleExact, required);
export const ensure = (required) => base(allowExtra, required);
export const ensureWith = (required, condition) => baseWith(allowExtra, required, condition);
//# sourceMappingURL=Contracts.js.map