import { LazyValue } from './LazyValue';
import { Optional } from './Optional';
/** par :: [LazyValue a] -> LazyValue [a] */
export declare const par: <T>(lazyValues: LazyValue<T>[]) => LazyValue<T[]>;
/**
 * Produces a LazyValue that may time out.
 * If it times out, it produces an Optional.none.
 * If it completes before the timeout, it produces an Optional.some.
 */
export declare const withTimeout: <T>(baseFn: (completer: (value: T) => void) => void, timeout: number) => LazyValue<Optional<T>>;
//# sourceMappingURL=LazyValues.d.ts.map